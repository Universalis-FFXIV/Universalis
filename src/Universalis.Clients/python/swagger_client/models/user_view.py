# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created': 'str',
        'last_online': 'str',
        'username': 'str',
        'email': 'str',
        'avatar': 'str',
        'sso': 'SsoView'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'last_online': 'lastOnline',
        'username': 'username',
        'email': 'email',
        'avatar': 'avatar',
        'sso': 'sso'
    }

    def __init__(self, id=None, created=None, last_online=None, username=None, email=None, avatar=None, sso=None, _configuration=None):  # noqa: E501
        """UserView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created = None
        self._last_online = None
        self._username = None
        self._email = None
        self._avatar = None
        self._sso = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if last_online is not None:
            self.last_online = last_online
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if avatar is not None:
            self.avatar = avatar
        if sso is not None:
            self.sso = sso

    @property
    def id(self):
        """Gets the id of this UserView.  # noqa: E501

        The user's ID.  # noqa: E501

        :return: The id of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserView.

        The user's ID.  # noqa: E501

        :param id: The id of this UserView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this UserView.  # noqa: E501

        The user's creation time, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The created of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserView.

        The user's creation time, in milliseconds since the UNIX epoch.  # noqa: E501

        :param created: The created of this UserView.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def last_online(self):
        """Gets the last_online of this UserView.  # noqa: E501

        The user's last time online, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The last_online of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._last_online

    @last_online.setter
    def last_online(self, last_online):
        """Sets the last_online of this UserView.

        The user's last time online, in milliseconds since the UNIX epoch.  # noqa: E501

        :param last_online: The last_online of this UserView.  # noqa: E501
        :type: str
        """

        self._last_online = last_online

    @property
    def username(self):
        """Gets the username of this UserView.  # noqa: E501

        The user's username.  # noqa: E501

        :return: The username of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserView.

        The user's username.  # noqa: E501

        :param username: The username of this UserView.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserView.  # noqa: E501

        The user's email address.  # noqa: E501

        :return: The email of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserView.

        The user's email address.  # noqa: E501

        :param email: The email of this UserView.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def avatar(self):
        """Gets the avatar of this UserView.  # noqa: E501

        The user's avatar.  # noqa: E501

        :return: The avatar of this UserView.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserView.

        The user's avatar.  # noqa: E501

        :param avatar: The avatar of this UserView.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def sso(self):
        """Gets the sso of this UserView.  # noqa: E501


        :return: The sso of this UserView.  # noqa: E501
        :rtype: SsoView
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this UserView.


        :param sso: The sso of this UserView.  # noqa: E501
        :type: SsoView
        """

        self._sso = sso

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserView):
            return True

        return self.to_dict() != other.to_dict()
