# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserAlertCreateView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_item_id': 'int',
        'alert_name': 'str',
        'alert_nq': 'bool',
        'alert_hq': 'bool',
        'alert_dc': 'bool',
        'alert_notify_discord': 'bool',
        'alert_notify_email': 'bool',
        'alert_triggers': 'list[str]',
        'alert_type': 'str'
    }

    attribute_map = {
        'alert_item_id': 'alert_item_id',
        'alert_name': 'alert_name',
        'alert_nq': 'alert_nq',
        'alert_hq': 'alert_hq',
        'alert_dc': 'alert_dc',
        'alert_notify_discord': 'alert_notify_discord',
        'alert_notify_email': 'alert_notify_email',
        'alert_triggers': 'alert_triggers',
        'alert_type': 'alert_type'
    }

    def __init__(self, alert_item_id=None, alert_name=None, alert_nq=None, alert_hq=None, alert_dc=None, alert_notify_discord=None, alert_notify_email=None, alert_triggers=None, alert_type=None, _configuration=None):  # noqa: E501
        """UserAlertCreateView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alert_item_id = None
        self._alert_name = None
        self._alert_nq = None
        self._alert_hq = None
        self._alert_dc = None
        self._alert_notify_discord = None
        self._alert_notify_email = None
        self._alert_triggers = None
        self._alert_type = None
        self.discriminator = None

        if alert_item_id is not None:
            self.alert_item_id = alert_item_id
        if alert_name is not None:
            self.alert_name = alert_name
        if alert_nq is not None:
            self.alert_nq = alert_nq
        if alert_hq is not None:
            self.alert_hq = alert_hq
        if alert_dc is not None:
            self.alert_dc = alert_dc
        if alert_notify_discord is not None:
            self.alert_notify_discord = alert_notify_discord
        if alert_notify_email is not None:
            self.alert_notify_email = alert_notify_email
        if alert_triggers is not None:
            self.alert_triggers = alert_triggers
        if alert_type is not None:
            self.alert_type = alert_type

    @property
    def alert_item_id(self):
        """Gets the alert_item_id of this UserAlertCreateView.  # noqa: E501

        The ID of the item that the new alert should apply to.  # noqa: E501

        :return: The alert_item_id of this UserAlertCreateView.  # noqa: E501
        :rtype: int
        """
        return self._alert_item_id

    @alert_item_id.setter
    def alert_item_id(self, alert_item_id):
        """Sets the alert_item_id of this UserAlertCreateView.

        The ID of the item that the new alert should apply to.  # noqa: E501

        :param alert_item_id: The alert_item_id of this UserAlertCreateView.  # noqa: E501
        :type: int
        """

        self._alert_item_id = alert_item_id

    @property
    def alert_name(self):
        """Gets the alert_name of this UserAlertCreateView.  # noqa: E501

        The alert name.  # noqa: E501

        :return: The alert_name of this UserAlertCreateView.  # noqa: E501
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """Sets the alert_name of this UserAlertCreateView.

        The alert name.  # noqa: E501

        :param alert_name: The alert_name of this UserAlertCreateView.  # noqa: E501
        :type: str
        """

        self._alert_name = alert_name

    @property
    def alert_nq(self):
        """Gets the alert_nq of this UserAlertCreateView.  # noqa: E501

        Whether or not this alert should apply to NQ items.  # noqa: E501

        :return: The alert_nq of this UserAlertCreateView.  # noqa: E501
        :rtype: bool
        """
        return self._alert_nq

    @alert_nq.setter
    def alert_nq(self, alert_nq):
        """Sets the alert_nq of this UserAlertCreateView.

        Whether or not this alert should apply to NQ items.  # noqa: E501

        :param alert_nq: The alert_nq of this UserAlertCreateView.  # noqa: E501
        :type: bool
        """

        self._alert_nq = alert_nq

    @property
    def alert_hq(self):
        """Gets the alert_hq of this UserAlertCreateView.  # noqa: E501

        Whether or not this alert should apply to HQ items.  # noqa: E501

        :return: The alert_hq of this UserAlertCreateView.  # noqa: E501
        :rtype: bool
        """
        return self._alert_hq

    @alert_hq.setter
    def alert_hq(self, alert_hq):
        """Sets the alert_hq of this UserAlertCreateView.

        Whether or not this alert should apply to HQ items.  # noqa: E501

        :param alert_hq: The alert_hq of this UserAlertCreateView.  # noqa: E501
        :type: bool
        """

        self._alert_hq = alert_hq

    @property
    def alert_dc(self):
        """Gets the alert_dc of this UserAlertCreateView.  # noqa: E501

        Whether or not this alert should apply to data on all worlds on the data center.  # noqa: E501

        :return: The alert_dc of this UserAlertCreateView.  # noqa: E501
        :rtype: bool
        """
        return self._alert_dc

    @alert_dc.setter
    def alert_dc(self, alert_dc):
        """Sets the alert_dc of this UserAlertCreateView.

        Whether or not this alert should apply to data on all worlds on the data center.  # noqa: E501

        :param alert_dc: The alert_dc of this UserAlertCreateView.  # noqa: E501
        :type: bool
        """

        self._alert_dc = alert_dc

    @property
    def alert_notify_discord(self):
        """Gets the alert_notify_discord of this UserAlertCreateView.  # noqa: E501

        Whether or not this alert should send notifications via Discord.  # noqa: E501

        :return: The alert_notify_discord of this UserAlertCreateView.  # noqa: E501
        :rtype: bool
        """
        return self._alert_notify_discord

    @alert_notify_discord.setter
    def alert_notify_discord(self, alert_notify_discord):
        """Sets the alert_notify_discord of this UserAlertCreateView.

        Whether or not this alert should send notifications via Discord.  # noqa: E501

        :param alert_notify_discord: The alert_notify_discord of this UserAlertCreateView.  # noqa: E501
        :type: bool
        """

        self._alert_notify_discord = alert_notify_discord

    @property
    def alert_notify_email(self):
        """Gets the alert_notify_email of this UserAlertCreateView.  # noqa: E501

        Whether or not this alert should send notifications via email.  # noqa: E501

        :return: The alert_notify_email of this UserAlertCreateView.  # noqa: E501
        :rtype: bool
        """
        return self._alert_notify_email

    @alert_notify_email.setter
    def alert_notify_email(self, alert_notify_email):
        """Sets the alert_notify_email of this UserAlertCreateView.

        Whether or not this alert should send notifications via email.  # noqa: E501

        :param alert_notify_email: The alert_notify_email of this UserAlertCreateView.  # noqa: E501
        :type: bool
        """

        self._alert_notify_email = alert_notify_email

    @property
    def alert_triggers(self):
        """Gets the alert_triggers of this UserAlertCreateView.  # noqa: E501

        The alert triggers.  # noqa: E501

        :return: The alert_triggers of this UserAlertCreateView.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert_triggers

    @alert_triggers.setter
    def alert_triggers(self, alert_triggers):
        """Sets the alert_triggers of this UserAlertCreateView.

        The alert triggers.  # noqa: E501

        :param alert_triggers: The alert_triggers of this UserAlertCreateView.  # noqa: E501
        :type: list[str]
        """

        self._alert_triggers = alert_triggers

    @property
    def alert_type(self):
        """Gets the alert_type of this UserAlertCreateView.  # noqa: E501

        The type of the alert.  # noqa: E501

        :return: The alert_type of this UserAlertCreateView.  # noqa: E501
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this UserAlertCreateView.

        The type of the alert.  # noqa: E501

        :param alert_type: The alert_type of this UserAlertCreateView.  # noqa: E501
        :type: str
        """

        self._alert_type = alert_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAlertCreateView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAlertCreateView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAlertCreateView):
            return True

        return self.to_dict() != other.to_dict()
