# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoryView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'world_id': 'int',
        'last_upload_time': 'int',
        'entries': 'list[MinimizedSaleView]',
        'dc_name': 'str',
        'stack_size_histogram': 'dict(str, int)',
        'stack_size_histogram_nq': 'dict(str, int)',
        'stack_size_histogram_hq': 'dict(str, int)',
        'regular_sale_velocity': 'float',
        'nq_sale_velocity': 'float',
        'hq_sale_velocity': 'float',
        'world_name': 'str'
    }

    attribute_map = {
        'item_id': 'itemID',
        'world_id': 'worldID',
        'last_upload_time': 'lastUploadTime',
        'entries': 'entries',
        'dc_name': 'dcName',
        'stack_size_histogram': 'stackSizeHistogram',
        'stack_size_histogram_nq': 'stackSizeHistogramNQ',
        'stack_size_histogram_hq': 'stackSizeHistogramHQ',
        'regular_sale_velocity': 'regularSaleVelocity',
        'nq_sale_velocity': 'nqSaleVelocity',
        'hq_sale_velocity': 'hqSaleVelocity',
        'world_name': 'worldName'
    }

    def __init__(self, item_id=None, world_id=None, last_upload_time=None, entries=None, dc_name=None, stack_size_histogram=None, stack_size_histogram_nq=None, stack_size_histogram_hq=None, regular_sale_velocity=None, nq_sale_velocity=None, hq_sale_velocity=None, world_name=None, _configuration=None):  # noqa: E501
        """HistoryView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_id = None
        self._world_id = None
        self._last_upload_time = None
        self._entries = None
        self._dc_name = None
        self._stack_size_histogram = None
        self._stack_size_histogram_nq = None
        self._stack_size_histogram_hq = None
        self._regular_sale_velocity = None
        self._nq_sale_velocity = None
        self._hq_sale_velocity = None
        self._world_name = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if world_id is not None:
            self.world_id = world_id
        if last_upload_time is not None:
            self.last_upload_time = last_upload_time
        if entries is not None:
            self.entries = entries
        if dc_name is not None:
            self.dc_name = dc_name
        if stack_size_histogram is not None:
            self.stack_size_histogram = stack_size_histogram
        if stack_size_histogram_nq is not None:
            self.stack_size_histogram_nq = stack_size_histogram_nq
        if stack_size_histogram_hq is not None:
            self.stack_size_histogram_hq = stack_size_histogram_hq
        if regular_sale_velocity is not None:
            self.regular_sale_velocity = regular_sale_velocity
        if nq_sale_velocity is not None:
            self.nq_sale_velocity = nq_sale_velocity
        if hq_sale_velocity is not None:
            self.hq_sale_velocity = hq_sale_velocity
        if world_name is not None:
            self.world_name = world_name

    @property
    def item_id(self):
        """Gets the item_id of this HistoryView.  # noqa: E501

        The item ID.  # noqa: E501

        :return: The item_id of this HistoryView.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this HistoryView.

        The item ID.  # noqa: E501

        :param item_id: The item_id of this HistoryView.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def world_id(self):
        """Gets the world_id of this HistoryView.  # noqa: E501

        The world ID, if applicable.  # noqa: E501

        :return: The world_id of this HistoryView.  # noqa: E501
        :rtype: int
        """
        return self._world_id

    @world_id.setter
    def world_id(self, world_id):
        """Sets the world_id of this HistoryView.

        The world ID, if applicable.  # noqa: E501

        :param world_id: The world_id of this HistoryView.  # noqa: E501
        :type: int
        """

        self._world_id = world_id

    @property
    def last_upload_time(self):
        """Gets the last_upload_time of this HistoryView.  # noqa: E501

        The last upload time for this endpoint, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The last_upload_time of this HistoryView.  # noqa: E501
        :rtype: int
        """
        return self._last_upload_time

    @last_upload_time.setter
    def last_upload_time(self, last_upload_time):
        """Sets the last_upload_time of this HistoryView.

        The last upload time for this endpoint, in milliseconds since the UNIX epoch.  # noqa: E501

        :param last_upload_time: The last_upload_time of this HistoryView.  # noqa: E501
        :type: int
        """

        self._last_upload_time = last_upload_time

    @property
    def entries(self):
        """Gets the entries of this HistoryView.  # noqa: E501

        The historical sales.  # noqa: E501

        :return: The entries of this HistoryView.  # noqa: E501
        :rtype: list[MinimizedSaleView]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this HistoryView.

        The historical sales.  # noqa: E501

        :param entries: The entries of this HistoryView.  # noqa: E501
        :type: list[MinimizedSaleView]
        """

        self._entries = entries

    @property
    def dc_name(self):
        """Gets the dc_name of this HistoryView.  # noqa: E501

        The DC name, if applicable.  # noqa: E501

        :return: The dc_name of this HistoryView.  # noqa: E501
        :rtype: str
        """
        return self._dc_name

    @dc_name.setter
    def dc_name(self, dc_name):
        """Sets the dc_name of this HistoryView.

        The DC name, if applicable.  # noqa: E501

        :param dc_name: The dc_name of this HistoryView.  # noqa: E501
        :type: str
        """

        self._dc_name = dc_name

    @property
    def stack_size_histogram(self):
        """Gets the stack_size_histogram of this HistoryView.  # noqa: E501

        A map of quantities to sale counts, representing the number of sales of each quantity.  # noqa: E501

        :return: The stack_size_histogram of this HistoryView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram

    @stack_size_histogram.setter
    def stack_size_histogram(self, stack_size_histogram):
        """Sets the stack_size_histogram of this HistoryView.

        A map of quantities to sale counts, representing the number of sales of each quantity.  # noqa: E501

        :param stack_size_histogram: The stack_size_histogram of this HistoryView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram = stack_size_histogram

    @property
    def stack_size_histogram_nq(self):
        """Gets the stack_size_histogram_nq of this HistoryView.  # noqa: E501

        A map of quantities to NQ sale counts, representing the number of sales of each quantity.  # noqa: E501

        :return: The stack_size_histogram_nq of this HistoryView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram_nq

    @stack_size_histogram_nq.setter
    def stack_size_histogram_nq(self, stack_size_histogram_nq):
        """Sets the stack_size_histogram_nq of this HistoryView.

        A map of quantities to NQ sale counts, representing the number of sales of each quantity.  # noqa: E501

        :param stack_size_histogram_nq: The stack_size_histogram_nq of this HistoryView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram_nq = stack_size_histogram_nq

    @property
    def stack_size_histogram_hq(self):
        """Gets the stack_size_histogram_hq of this HistoryView.  # noqa: E501

        A map of quantities to HQ sale counts, representing the number of sales of each quantity.  # noqa: E501

        :return: The stack_size_histogram_hq of this HistoryView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram_hq

    @stack_size_histogram_hq.setter
    def stack_size_histogram_hq(self, stack_size_histogram_hq):
        """Sets the stack_size_histogram_hq of this HistoryView.

        A map of quantities to HQ sale counts, representing the number of sales of each quantity.  # noqa: E501

        :param stack_size_histogram_hq: The stack_size_histogram_hq of this HistoryView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram_hq = stack_size_histogram_hq

    @property
    def regular_sale_velocity(self):
        """Gets the regular_sale_velocity of this HistoryView.  # noqa: E501

        The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :return: The regular_sale_velocity of this HistoryView.  # noqa: E501
        :rtype: float
        """
        return self._regular_sale_velocity

    @regular_sale_velocity.setter
    def regular_sale_velocity(self, regular_sale_velocity):
        """Sets the regular_sale_velocity of this HistoryView.

        The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :param regular_sale_velocity: The regular_sale_velocity of this HistoryView.  # noqa: E501
        :type: float
        """

        self._regular_sale_velocity = regular_sale_velocity

    @property
    def nq_sale_velocity(self):
        """Gets the nq_sale_velocity of this HistoryView.  # noqa: E501

        The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :return: The nq_sale_velocity of this HistoryView.  # noqa: E501
        :rtype: float
        """
        return self._nq_sale_velocity

    @nq_sale_velocity.setter
    def nq_sale_velocity(self, nq_sale_velocity):
        """Sets the nq_sale_velocity of this HistoryView.

        The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :param nq_sale_velocity: The nq_sale_velocity of this HistoryView.  # noqa: E501
        :type: float
        """

        self._nq_sale_velocity = nq_sale_velocity

    @property
    def hq_sale_velocity(self):
        """Gets the hq_sale_velocity of this HistoryView.  # noqa: E501

        The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :return: The hq_sale_velocity of this HistoryView.  # noqa: E501
        :rtype: float
        """
        return self._hq_sale_velocity

    @hq_sale_velocity.setter
    def hq_sale_velocity(self, hq_sale_velocity):
        """Sets the hq_sale_velocity of this HistoryView.

        The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  # noqa: E501

        :param hq_sale_velocity: The hq_sale_velocity of this HistoryView.  # noqa: E501
        :type: float
        """

        self._hq_sale_velocity = hq_sale_velocity

    @property
    def world_name(self):
        """Gets the world_name of this HistoryView.  # noqa: E501

        The world name, if applicable.  # noqa: E501

        :return: The world_name of this HistoryView.  # noqa: E501
        :rtype: str
        """
        return self._world_name

    @world_name.setter
    def world_name(self, world_name):
        """Sets the world_name of this HistoryView.

        The world name, if applicable.  # noqa: E501

        :param world_name: The world_name of this HistoryView.  # noqa: E501
        :type: str
        """

        self._world_name = world_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoryView):
            return True

        return self.to_dict() != other.to_dict()
