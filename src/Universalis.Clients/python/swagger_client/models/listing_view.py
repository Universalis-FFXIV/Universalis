# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ListingView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_review_time': 'int',
        'price_per_unit': 'int',
        'quantity': 'int',
        'stain_id': 'int',
        'world_name': 'str',
        'world_id': 'int',
        'creator_name': 'str',
        'creator_id': 'str',
        'hq': 'bool',
        'is_crafted': 'bool',
        'listing_id': 'str',
        'materia': 'list[MateriaView]',
        'on_mannequin': 'bool',
        'retainer_city': 'int',
        'retainer_id': 'str',
        'retainer_name': 'str',
        'seller_id': 'str',
        'total': 'int'
    }

    attribute_map = {
        'last_review_time': 'lastReviewTime',
        'price_per_unit': 'pricePerUnit',
        'quantity': 'quantity',
        'stain_id': 'stainID',
        'world_name': 'worldName',
        'world_id': 'worldID',
        'creator_name': 'creatorName',
        'creator_id': 'creatorID',
        'hq': 'hq',
        'is_crafted': 'isCrafted',
        'listing_id': 'listingID',
        'materia': 'materia',
        'on_mannequin': 'onMannequin',
        'retainer_city': 'retainerCity',
        'retainer_id': 'retainerID',
        'retainer_name': 'retainerName',
        'seller_id': 'sellerID',
        'total': 'total'
    }

    def __init__(self, last_review_time=None, price_per_unit=None, quantity=None, stain_id=None, world_name=None, world_id=None, creator_name=None, creator_id=None, hq=None, is_crafted=None, listing_id=None, materia=None, on_mannequin=None, retainer_city=None, retainer_id=None, retainer_name=None, seller_id=None, total=None, _configuration=None):  # noqa: E501
        """ListingView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_review_time = None
        self._price_per_unit = None
        self._quantity = None
        self._stain_id = None
        self._world_name = None
        self._world_id = None
        self._creator_name = None
        self._creator_id = None
        self._hq = None
        self._is_crafted = None
        self._listing_id = None
        self._materia = None
        self._on_mannequin = None
        self._retainer_city = None
        self._retainer_id = None
        self._retainer_name = None
        self._seller_id = None
        self._total = None
        self.discriminator = None

        if last_review_time is not None:
            self.last_review_time = last_review_time
        if price_per_unit is not None:
            self.price_per_unit = price_per_unit
        if quantity is not None:
            self.quantity = quantity
        if stain_id is not None:
            self.stain_id = stain_id
        if world_name is not None:
            self.world_name = world_name
        if world_id is not None:
            self.world_id = world_id
        if creator_name is not None:
            self.creator_name = creator_name
        if creator_id is not None:
            self.creator_id = creator_id
        if hq is not None:
            self.hq = hq
        if is_crafted is not None:
            self.is_crafted = is_crafted
        if listing_id is not None:
            self.listing_id = listing_id
        if materia is not None:
            self.materia = materia
        if on_mannequin is not None:
            self.on_mannequin = on_mannequin
        if retainer_city is not None:
            self.retainer_city = retainer_city
        if retainer_id is not None:
            self.retainer_id = retainer_id
        if retainer_name is not None:
            self.retainer_name = retainer_name
        if seller_id is not None:
            self.seller_id = seller_id
        if total is not None:
            self.total = total

    @property
    def last_review_time(self):
        """Gets the last_review_time of this ListingView.  # noqa: E501

        The time that this listing was posted, in seconds since the UNIX epoch.  # noqa: E501

        :return: The last_review_time of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._last_review_time

    @last_review_time.setter
    def last_review_time(self, last_review_time):
        """Sets the last_review_time of this ListingView.

        The time that this listing was posted, in seconds since the UNIX epoch.  # noqa: E501

        :param last_review_time: The last_review_time of this ListingView.  # noqa: E501
        :type: int
        """

        self._last_review_time = last_review_time

    @property
    def price_per_unit(self):
        """Gets the price_per_unit of this ListingView.  # noqa: E501

        The price per unit sold.  # noqa: E501

        :return: The price_per_unit of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._price_per_unit

    @price_per_unit.setter
    def price_per_unit(self, price_per_unit):
        """Sets the price_per_unit of this ListingView.

        The price per unit sold.  # noqa: E501

        :param price_per_unit: The price_per_unit of this ListingView.  # noqa: E501
        :type: int
        """

        self._price_per_unit = price_per_unit

    @property
    def quantity(self):
        """Gets the quantity of this ListingView.  # noqa: E501

        The stack size sold.  # noqa: E501

        :return: The quantity of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ListingView.

        The stack size sold.  # noqa: E501

        :param quantity: The quantity of this ListingView.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def stain_id(self):
        """Gets the stain_id of this ListingView.  # noqa: E501

        The ID of the dye on this item.  # noqa: E501

        :return: The stain_id of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._stain_id

    @stain_id.setter
    def stain_id(self, stain_id):
        """Sets the stain_id of this ListingView.

        The ID of the dye on this item.  # noqa: E501

        :param stain_id: The stain_id of this ListingView.  # noqa: E501
        :type: int
        """

        self._stain_id = stain_id

    @property
    def world_name(self):
        """Gets the world_name of this ListingView.  # noqa: E501

        The world name, if applicable.  # noqa: E501

        :return: The world_name of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._world_name

    @world_name.setter
    def world_name(self, world_name):
        """Sets the world_name of this ListingView.

        The world name, if applicable.  # noqa: E501

        :param world_name: The world_name of this ListingView.  # noqa: E501
        :type: str
        """

        self._world_name = world_name

    @property
    def world_id(self):
        """Gets the world_id of this ListingView.  # noqa: E501

        The world ID, if applicable.  # noqa: E501

        :return: The world_id of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._world_id

    @world_id.setter
    def world_id(self, world_id):
        """Sets the world_id of this ListingView.

        The world ID, if applicable.  # noqa: E501

        :param world_id: The world_id of this ListingView.  # noqa: E501
        :type: int
        """

        self._world_id = world_id

    @property
    def creator_name(self):
        """Gets the creator_name of this ListingView.  # noqa: E501

        The creator's character name.  # noqa: E501

        :return: The creator_name of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this ListingView.

        The creator's character name.  # noqa: E501

        :param creator_name: The creator_name of this ListingView.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def creator_id(self):
        """Gets the creator_id of this ListingView.  # noqa: E501

        A SHA256 hash of the creator's ID.  # noqa: E501

        :return: The creator_id of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ListingView.

        A SHA256 hash of the creator's ID.  # noqa: E501

        :param creator_id: The creator_id of this ListingView.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def hq(self):
        """Gets the hq of this ListingView.  # noqa: E501

        Whether or not the item is high-quality.  # noqa: E501

        :return: The hq of this ListingView.  # noqa: E501
        :rtype: bool
        """
        return self._hq

    @hq.setter
    def hq(self, hq):
        """Sets the hq of this ListingView.

        Whether or not the item is high-quality.  # noqa: E501

        :param hq: The hq of this ListingView.  # noqa: E501
        :type: bool
        """

        self._hq = hq

    @property
    def is_crafted(self):
        """Gets the is_crafted of this ListingView.  # noqa: E501

        Whether or not the item is crafted.  # noqa: E501

        :return: The is_crafted of this ListingView.  # noqa: E501
        :rtype: bool
        """
        return self._is_crafted

    @is_crafted.setter
    def is_crafted(self, is_crafted):
        """Sets the is_crafted of this ListingView.

        Whether or not the item is crafted.  # noqa: E501

        :param is_crafted: The is_crafted of this ListingView.  # noqa: E501
        :type: bool
        """

        self._is_crafted = is_crafted

    @property
    def listing_id(self):
        """Gets the listing_id of this ListingView.  # noqa: E501

        A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null.  # noqa: E501

        :return: The listing_id of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this ListingView.

        A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null.  # noqa: E501

        :param listing_id: The listing_id of this ListingView.  # noqa: E501
        :type: str
        """

        self._listing_id = listing_id

    @property
    def materia(self):
        """Gets the materia of this ListingView.  # noqa: E501

        The materia on this item.  # noqa: E501

        :return: The materia of this ListingView.  # noqa: E501
        :rtype: list[MateriaView]
        """
        return self._materia

    @materia.setter
    def materia(self, materia):
        """Sets the materia of this ListingView.

        The materia on this item.  # noqa: E501

        :param materia: The materia of this ListingView.  # noqa: E501
        :type: list[MateriaView]
        """

        self._materia = materia

    @property
    def on_mannequin(self):
        """Gets the on_mannequin of this ListingView.  # noqa: E501

        Whether or not the item is being sold on a mannequin.  # noqa: E501

        :return: The on_mannequin of this ListingView.  # noqa: E501
        :rtype: bool
        """
        return self._on_mannequin

    @on_mannequin.setter
    def on_mannequin(self, on_mannequin):
        """Sets the on_mannequin of this ListingView.

        Whether or not the item is being sold on a mannequin.  # noqa: E501

        :param on_mannequin: The on_mannequin of this ListingView.  # noqa: E501
        :type: bool
        """

        self._on_mannequin = on_mannequin

    @property
    def retainer_city(self):
        """Gets the retainer_city of this ListingView.  # noqa: E501

        The city ID of the retainer.  Limsa Lominsa = 1  Gridania = 2  Ul'dah = 3  Ishgard = 4  Kugane = 7  Crystarium = 10  # noqa: E501

        :return: The retainer_city of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._retainer_city

    @retainer_city.setter
    def retainer_city(self, retainer_city):
        """Sets the retainer_city of this ListingView.

        The city ID of the retainer.  Limsa Lominsa = 1  Gridania = 2  Ul'dah = 3  Ishgard = 4  Kugane = 7  Crystarium = 10  # noqa: E501

        :param retainer_city: The retainer_city of this ListingView.  # noqa: E501
        :type: int
        """

        self._retainer_city = retainer_city

    @property
    def retainer_id(self):
        """Gets the retainer_id of this ListingView.  # noqa: E501

        A SHA256 hash of the retainer's ID.  # noqa: E501

        :return: The retainer_id of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._retainer_id

    @retainer_id.setter
    def retainer_id(self, retainer_id):
        """Sets the retainer_id of this ListingView.

        A SHA256 hash of the retainer's ID.  # noqa: E501

        :param retainer_id: The retainer_id of this ListingView.  # noqa: E501
        :type: str
        """

        self._retainer_id = retainer_id

    @property
    def retainer_name(self):
        """Gets the retainer_name of this ListingView.  # noqa: E501

        The retainer's name.  # noqa: E501

        :return: The retainer_name of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._retainer_name

    @retainer_name.setter
    def retainer_name(self, retainer_name):
        """Sets the retainer_name of this ListingView.

        The retainer's name.  # noqa: E501

        :param retainer_name: The retainer_name of this ListingView.  # noqa: E501
        :type: str
        """

        self._retainer_name = retainer_name

    @property
    def seller_id(self):
        """Gets the seller_id of this ListingView.  # noqa: E501

        A SHA256 hash of the seller's ID.  # noqa: E501

        :return: The seller_id of this ListingView.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this ListingView.

        A SHA256 hash of the seller's ID.  # noqa: E501

        :param seller_id: The seller_id of this ListingView.  # noqa: E501
        :type: str
        """

        self._seller_id = seller_id

    @property
    def total(self):
        """Gets the total of this ListingView.  # noqa: E501

        The total price.  # noqa: E501

        :return: The total of this ListingView.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListingView.

        The total price.  # noqa: E501

        :param total: The total of this ListingView.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListingView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListingView):
            return True

        return self.to_dict() != other.to_dict()
