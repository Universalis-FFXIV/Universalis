# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CurrentlyShownView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'world_id': 'int',
        'last_upload_time': 'int',
        'listings': 'list[ListingView]',
        'recent_history': 'list[SaleView]',
        'dc_name': 'str',
        'current_average_price': 'float',
        'current_average_price_nq': 'float',
        'current_average_price_hq': 'float',
        'regular_sale_velocity': 'float',
        'nq_sale_velocity': 'float',
        'hq_sale_velocity': 'float',
        'average_price': 'float',
        'average_price_nq': 'float',
        'average_price_hq': 'float',
        'min_price': 'int',
        'min_price_nq': 'int',
        'min_price_hq': 'int',
        'max_price': 'int',
        'max_price_nq': 'int',
        'max_price_hq': 'int',
        'stack_size_histogram': 'dict(str, int)',
        'stack_size_histogram_nq': 'dict(str, int)',
        'stack_size_histogram_hq': 'dict(str, int)',
        'world_name': 'str',
        'world_upload_times': 'dict(str, int)'
    }

    attribute_map = {
        'item_id': 'itemID',
        'world_id': 'worldID',
        'last_upload_time': 'lastUploadTime',
        'listings': 'listings',
        'recent_history': 'recentHistory',
        'dc_name': 'dcName',
        'current_average_price': 'currentAveragePrice',
        'current_average_price_nq': 'currentAveragePriceNQ',
        'current_average_price_hq': 'currentAveragePriceHQ',
        'regular_sale_velocity': 'regularSaleVelocity',
        'nq_sale_velocity': 'nqSaleVelocity',
        'hq_sale_velocity': 'hqSaleVelocity',
        'average_price': 'averagePrice',
        'average_price_nq': 'averagePriceNQ',
        'average_price_hq': 'averagePriceHQ',
        'min_price': 'minPrice',
        'min_price_nq': 'minPriceNQ',
        'min_price_hq': 'minPriceHQ',
        'max_price': 'maxPrice',
        'max_price_nq': 'maxPriceNQ',
        'max_price_hq': 'maxPriceHQ',
        'stack_size_histogram': 'stackSizeHistogram',
        'stack_size_histogram_nq': 'stackSizeHistogramNQ',
        'stack_size_histogram_hq': 'stackSizeHistogramHQ',
        'world_name': 'worldName',
        'world_upload_times': 'worldUploadTimes'
    }

    def __init__(self, item_id=None, world_id=None, last_upload_time=None, listings=None, recent_history=None, dc_name=None, current_average_price=None, current_average_price_nq=None, current_average_price_hq=None, regular_sale_velocity=None, nq_sale_velocity=None, hq_sale_velocity=None, average_price=None, average_price_nq=None, average_price_hq=None, min_price=None, min_price_nq=None, min_price_hq=None, max_price=None, max_price_nq=None, max_price_hq=None, stack_size_histogram=None, stack_size_histogram_nq=None, stack_size_histogram_hq=None, world_name=None, world_upload_times=None, _configuration=None):  # noqa: E501
        """CurrentlyShownView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_id = None
        self._world_id = None
        self._last_upload_time = None
        self._listings = None
        self._recent_history = None
        self._dc_name = None
        self._current_average_price = None
        self._current_average_price_nq = None
        self._current_average_price_hq = None
        self._regular_sale_velocity = None
        self._nq_sale_velocity = None
        self._hq_sale_velocity = None
        self._average_price = None
        self._average_price_nq = None
        self._average_price_hq = None
        self._min_price = None
        self._min_price_nq = None
        self._min_price_hq = None
        self._max_price = None
        self._max_price_nq = None
        self._max_price_hq = None
        self._stack_size_histogram = None
        self._stack_size_histogram_nq = None
        self._stack_size_histogram_hq = None
        self._world_name = None
        self._world_upload_times = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if world_id is not None:
            self.world_id = world_id
        if last_upload_time is not None:
            self.last_upload_time = last_upload_time
        if listings is not None:
            self.listings = listings
        if recent_history is not None:
            self.recent_history = recent_history
        if dc_name is not None:
            self.dc_name = dc_name
        if current_average_price is not None:
            self.current_average_price = current_average_price
        if current_average_price_nq is not None:
            self.current_average_price_nq = current_average_price_nq
        if current_average_price_hq is not None:
            self.current_average_price_hq = current_average_price_hq
        if regular_sale_velocity is not None:
            self.regular_sale_velocity = regular_sale_velocity
        if nq_sale_velocity is not None:
            self.nq_sale_velocity = nq_sale_velocity
        if hq_sale_velocity is not None:
            self.hq_sale_velocity = hq_sale_velocity
        if average_price is not None:
            self.average_price = average_price
        if average_price_nq is not None:
            self.average_price_nq = average_price_nq
        if average_price_hq is not None:
            self.average_price_hq = average_price_hq
        if min_price is not None:
            self.min_price = min_price
        if min_price_nq is not None:
            self.min_price_nq = min_price_nq
        if min_price_hq is not None:
            self.min_price_hq = min_price_hq
        if max_price is not None:
            self.max_price = max_price
        if max_price_nq is not None:
            self.max_price_nq = max_price_nq
        if max_price_hq is not None:
            self.max_price_hq = max_price_hq
        if stack_size_histogram is not None:
            self.stack_size_histogram = stack_size_histogram
        if stack_size_histogram_nq is not None:
            self.stack_size_histogram_nq = stack_size_histogram_nq
        if stack_size_histogram_hq is not None:
            self.stack_size_histogram_hq = stack_size_histogram_hq
        if world_name is not None:
            self.world_name = world_name
        if world_upload_times is not None:
            self.world_upload_times = world_upload_times

    @property
    def item_id(self):
        """Gets the item_id of this CurrentlyShownView.  # noqa: E501

        The item ID.  # noqa: E501

        :return: The item_id of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this CurrentlyShownView.

        The item ID.  # noqa: E501

        :param item_id: The item_id of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def world_id(self):
        """Gets the world_id of this CurrentlyShownView.  # noqa: E501

        The world ID, if applicable.  # noqa: E501

        :return: The world_id of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._world_id

    @world_id.setter
    def world_id(self, world_id):
        """Sets the world_id of this CurrentlyShownView.

        The world ID, if applicable.  # noqa: E501

        :param world_id: The world_id of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._world_id = world_id

    @property
    def last_upload_time(self):
        """Gets the last_upload_time of this CurrentlyShownView.  # noqa: E501

        The last upload time for this endpoint, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The last_upload_time of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._last_upload_time

    @last_upload_time.setter
    def last_upload_time(self, last_upload_time):
        """Sets the last_upload_time of this CurrentlyShownView.

        The last upload time for this endpoint, in milliseconds since the UNIX epoch.  # noqa: E501

        :param last_upload_time: The last_upload_time of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._last_upload_time = last_upload_time

    @property
    def listings(self):
        """Gets the listings of this CurrentlyShownView.  # noqa: E501

        The currently-shown listings.  # noqa: E501

        :return: The listings of this CurrentlyShownView.  # noqa: E501
        :rtype: list[ListingView]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this CurrentlyShownView.

        The currently-shown listings.  # noqa: E501

        :param listings: The listings of this CurrentlyShownView.  # noqa: E501
        :type: list[ListingView]
        """

        self._listings = listings

    @property
    def recent_history(self):
        """Gets the recent_history of this CurrentlyShownView.  # noqa: E501

        The currently-shown sales.  # noqa: E501

        :return: The recent_history of this CurrentlyShownView.  # noqa: E501
        :rtype: list[SaleView]
        """
        return self._recent_history

    @recent_history.setter
    def recent_history(self, recent_history):
        """Sets the recent_history of this CurrentlyShownView.

        The currently-shown sales.  # noqa: E501

        :param recent_history: The recent_history of this CurrentlyShownView.  # noqa: E501
        :type: list[SaleView]
        """

        self._recent_history = recent_history

    @property
    def dc_name(self):
        """Gets the dc_name of this CurrentlyShownView.  # noqa: E501

        The DC name, if applicable.  # noqa: E501

        :return: The dc_name of this CurrentlyShownView.  # noqa: E501
        :rtype: str
        """
        return self._dc_name

    @dc_name.setter
    def dc_name(self, dc_name):
        """Sets the dc_name of this CurrentlyShownView.

        The DC name, if applicable.  # noqa: E501

        :param dc_name: The dc_name of this CurrentlyShownView.  # noqa: E501
        :type: str
        """

        self._dc_name = dc_name

    @property
    def current_average_price(self):
        """Gets the current_average_price of this CurrentlyShownView.  # noqa: E501

        The average listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The current_average_price of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._current_average_price

    @current_average_price.setter
    def current_average_price(self, current_average_price):
        """Sets the current_average_price of this CurrentlyShownView.

        The average listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param current_average_price: The current_average_price of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._current_average_price = current_average_price

    @property
    def current_average_price_nq(self):
        """Gets the current_average_price_nq of this CurrentlyShownView.  # noqa: E501

        The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The current_average_price_nq of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._current_average_price_nq

    @current_average_price_nq.setter
    def current_average_price_nq(self, current_average_price_nq):
        """Sets the current_average_price_nq of this CurrentlyShownView.

        The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param current_average_price_nq: The current_average_price_nq of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._current_average_price_nq = current_average_price_nq

    @property
    def current_average_price_hq(self):
        """Gets the current_average_price_hq of this CurrentlyShownView.  # noqa: E501

        The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The current_average_price_hq of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._current_average_price_hq

    @current_average_price_hq.setter
    def current_average_price_hq(self, current_average_price_hq):
        """Sets the current_average_price_hq of this CurrentlyShownView.

        The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param current_average_price_hq: The current_average_price_hq of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._current_average_price_hq = current_average_price_hq

    @property
    def regular_sale_velocity(self):
        """Gets the regular_sale_velocity of this CurrentlyShownView.  # noqa: E501

        The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :return: The regular_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._regular_sale_velocity

    @regular_sale_velocity.setter
    def regular_sale_velocity(self, regular_sale_velocity):
        """Sets the regular_sale_velocity of this CurrentlyShownView.

        The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :param regular_sale_velocity: The regular_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._regular_sale_velocity = regular_sale_velocity

    @property
    def nq_sale_velocity(self):
        """Gets the nq_sale_velocity of this CurrentlyShownView.  # noqa: E501

        The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :return: The nq_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._nq_sale_velocity

    @nq_sale_velocity.setter
    def nq_sale_velocity(self, nq_sale_velocity):
        """Sets the nq_sale_velocity of this CurrentlyShownView.

        The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :param nq_sale_velocity: The nq_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._nq_sale_velocity = nq_sale_velocity

    @property
    def hq_sale_velocity(self):
        """Gets the hq_sale_velocity of this CurrentlyShownView.  # noqa: E501

        The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :return: The hq_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._hq_sale_velocity

    @hq_sale_velocity.setter
    def hq_sale_velocity(self, hq_sale_velocity):
        """Sets the hq_sale_velocity of this CurrentlyShownView.

        The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.  # noqa: E501

        :param hq_sale_velocity: The hq_sale_velocity of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._hq_sale_velocity = hq_sale_velocity

    @property
    def average_price(self):
        """Gets the average_price of this CurrentlyShownView.  # noqa: E501

        The average sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The average_price of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this CurrentlyShownView.

        The average sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param average_price: The average_price of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._average_price = average_price

    @property
    def average_price_nq(self):
        """Gets the average_price_nq of this CurrentlyShownView.  # noqa: E501

        The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The average_price_nq of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._average_price_nq

    @average_price_nq.setter
    def average_price_nq(self, average_price_nq):
        """Sets the average_price_nq of this CurrentlyShownView.

        The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param average_price_nq: The average_price_nq of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._average_price_nq = average_price_nq

    @property
    def average_price_hq(self):
        """Gets the average_price_hq of this CurrentlyShownView.  # noqa: E501

        The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :return: The average_price_hq of this CurrentlyShownView.  # noqa: E501
        :rtype: float
        """
        return self._average_price_hq

    @average_price_hq.setter
    def average_price_hq(self, average_price_hq):
        """Sets the average_price_hq of this CurrentlyShownView.

        The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean.  # noqa: E501

        :param average_price_hq: The average_price_hq of this CurrentlyShownView.  # noqa: E501
        :type: float
        """

        self._average_price_hq = average_price_hq

    @property
    def min_price(self):
        """Gets the min_price of this CurrentlyShownView.  # noqa: E501

        The minimum listing price.  # noqa: E501

        :return: The min_price of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this CurrentlyShownView.

        The minimum listing price.  # noqa: E501

        :param min_price: The min_price of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._min_price = min_price

    @property
    def min_price_nq(self):
        """Gets the min_price_nq of this CurrentlyShownView.  # noqa: E501

        The minimum NQ listing price.  # noqa: E501

        :return: The min_price_nq of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._min_price_nq

    @min_price_nq.setter
    def min_price_nq(self, min_price_nq):
        """Sets the min_price_nq of this CurrentlyShownView.

        The minimum NQ listing price.  # noqa: E501

        :param min_price_nq: The min_price_nq of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._min_price_nq = min_price_nq

    @property
    def min_price_hq(self):
        """Gets the min_price_hq of this CurrentlyShownView.  # noqa: E501

        The minimum HQ listing price.  # noqa: E501

        :return: The min_price_hq of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._min_price_hq

    @min_price_hq.setter
    def min_price_hq(self, min_price_hq):
        """Sets the min_price_hq of this CurrentlyShownView.

        The minimum HQ listing price.  # noqa: E501

        :param min_price_hq: The min_price_hq of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._min_price_hq = min_price_hq

    @property
    def max_price(self):
        """Gets the max_price of this CurrentlyShownView.  # noqa: E501

        The maximum listing price.  # noqa: E501

        :return: The max_price of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this CurrentlyShownView.

        The maximum listing price.  # noqa: E501

        :param max_price: The max_price of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._max_price = max_price

    @property
    def max_price_nq(self):
        """Gets the max_price_nq of this CurrentlyShownView.  # noqa: E501

        The maximum NQ listing price.  # noqa: E501

        :return: The max_price_nq of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._max_price_nq

    @max_price_nq.setter
    def max_price_nq(self, max_price_nq):
        """Sets the max_price_nq of this CurrentlyShownView.

        The maximum NQ listing price.  # noqa: E501

        :param max_price_nq: The max_price_nq of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._max_price_nq = max_price_nq

    @property
    def max_price_hq(self):
        """Gets the max_price_hq of this CurrentlyShownView.  # noqa: E501

        The maximum HQ listing price.  # noqa: E501

        :return: The max_price_hq of this CurrentlyShownView.  # noqa: E501
        :rtype: int
        """
        return self._max_price_hq

    @max_price_hq.setter
    def max_price_hq(self, max_price_hq):
        """Sets the max_price_hq of this CurrentlyShownView.

        The maximum HQ listing price.  # noqa: E501

        :param max_price_hq: The max_price_hq of this CurrentlyShownView.  # noqa: E501
        :type: int
        """

        self._max_price_hq = max_price_hq

    @property
    def stack_size_histogram(self):
        """Gets the stack_size_histogram of this CurrentlyShownView.  # noqa: E501

        A map of quantities to listing counts, representing the number of listings of each quantity.  # noqa: E501

        :return: The stack_size_histogram of this CurrentlyShownView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram

    @stack_size_histogram.setter
    def stack_size_histogram(self, stack_size_histogram):
        """Sets the stack_size_histogram of this CurrentlyShownView.

        A map of quantities to listing counts, representing the number of listings of each quantity.  # noqa: E501

        :param stack_size_histogram: The stack_size_histogram of this CurrentlyShownView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram = stack_size_histogram

    @property
    def stack_size_histogram_nq(self):
        """Gets the stack_size_histogram_nq of this CurrentlyShownView.  # noqa: E501

        A map of quantities to NQ listing counts, representing the number of listings of each quantity.  # noqa: E501

        :return: The stack_size_histogram_nq of this CurrentlyShownView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram_nq

    @stack_size_histogram_nq.setter
    def stack_size_histogram_nq(self, stack_size_histogram_nq):
        """Sets the stack_size_histogram_nq of this CurrentlyShownView.

        A map of quantities to NQ listing counts, representing the number of listings of each quantity.  # noqa: E501

        :param stack_size_histogram_nq: The stack_size_histogram_nq of this CurrentlyShownView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram_nq = stack_size_histogram_nq

    @property
    def stack_size_histogram_hq(self):
        """Gets the stack_size_histogram_hq of this CurrentlyShownView.  # noqa: E501

        A map of quantities to HQ listing counts, representing the number of listings of each quantity.  # noqa: E501

        :return: The stack_size_histogram_hq of this CurrentlyShownView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._stack_size_histogram_hq

    @stack_size_histogram_hq.setter
    def stack_size_histogram_hq(self, stack_size_histogram_hq):
        """Sets the stack_size_histogram_hq of this CurrentlyShownView.

        A map of quantities to HQ listing counts, representing the number of listings of each quantity.  # noqa: E501

        :param stack_size_histogram_hq: The stack_size_histogram_hq of this CurrentlyShownView.  # noqa: E501
        :type: dict(str, int)
        """

        self._stack_size_histogram_hq = stack_size_histogram_hq

    @property
    def world_name(self):
        """Gets the world_name of this CurrentlyShownView.  # noqa: E501

        The world name, if applicable.  # noqa: E501

        :return: The world_name of this CurrentlyShownView.  # noqa: E501
        :rtype: str
        """
        return self._world_name

    @world_name.setter
    def world_name(self, world_name):
        """Sets the world_name of this CurrentlyShownView.

        The world name, if applicable.  # noqa: E501

        :param world_name: The world_name of this CurrentlyShownView.  # noqa: E501
        :type: str
        """

        self._world_name = world_name

    @property
    def world_upload_times(self):
        """Gets the world_upload_times of this CurrentlyShownView.  # noqa: E501

        The last upload times in milliseconds since epoch for each world in the response, if this is a DC request.  # noqa: E501

        :return: The world_upload_times of this CurrentlyShownView.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._world_upload_times

    @world_upload_times.setter
    def world_upload_times(self, world_upload_times):
        """Sets the world_upload_times of this CurrentlyShownView.

        The last upload times in milliseconds since epoch for each world in the response, if this is a DC request.  # noqa: E501

        :param world_upload_times: The world_upload_times of this CurrentlyShownView.  # noqa: E501
        :type: dict(str, int)
        """

        self._world_upload_times = world_upload_times

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentlyShownView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentlyShownView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentlyShownView):
            return True

        return self.to_dict() != other.to_dict()
