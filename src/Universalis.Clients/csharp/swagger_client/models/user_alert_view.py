# coding: utf-8

"""
    Universalis

    Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!    # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserAlertView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'item_id': 'int',
        'created': 'str',
        'last_checked': 'str',
        'name': 'str',
        'server': 'str',
        'expiry': 'str',
        'trigger_conditions': 'list[str]',
        'trigger_type': 'str',
        'trigger_last_sent': 'str',
        'trigger_data_center': 'bool',
        'trigger_hq': 'bool',
        'trigger_nq': 'bool',
        'trigger_active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemID',
        'created': 'created',
        'last_checked': 'lastChecked',
        'name': 'name',
        'server': 'server',
        'expiry': 'expiry',
        'trigger_conditions': 'triggerConditions',
        'trigger_type': 'triggerType',
        'trigger_last_sent': 'triggerLastSent',
        'trigger_data_center': 'triggerDataCenter',
        'trigger_hq': 'triggerHQ',
        'trigger_nq': 'triggerNQ',
        'trigger_active': 'triggerActive'
    }

    def __init__(self, id=None, item_id=None, created=None, last_checked=None, name=None, server=None, expiry=None, trigger_conditions=None, trigger_type=None, trigger_last_sent=None, trigger_data_center=None, trigger_hq=None, trigger_nq=None, trigger_active=None, _configuration=None):  # noqa: E501
        """UserAlertView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._item_id = None
        self._created = None
        self._last_checked = None
        self._name = None
        self._server = None
        self._expiry = None
        self._trigger_conditions = None
        self._trigger_type = None
        self._trigger_last_sent = None
        self._trigger_data_center = None
        self._trigger_hq = None
        self._trigger_nq = None
        self._trigger_active = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if created is not None:
            self.created = created
        if last_checked is not None:
            self.last_checked = last_checked
        if name is not None:
            self.name = name
        if server is not None:
            self.server = server
        if expiry is not None:
            self.expiry = expiry
        if trigger_conditions is not None:
            self.trigger_conditions = trigger_conditions
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if trigger_last_sent is not None:
            self.trigger_last_sent = trigger_last_sent
        if trigger_data_center is not None:
            self.trigger_data_center = trigger_data_center
        if trigger_hq is not None:
            self.trigger_hq = trigger_hq
        if trigger_nq is not None:
            self.trigger_nq = trigger_nq
        if trigger_active is not None:
            self.trigger_active = trigger_active

    @property
    def id(self):
        """Gets the id of this UserAlertView.  # noqa: E501

        The alert's ID.  # noqa: E501

        :return: The id of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAlertView.

        The alert's ID.  # noqa: E501

        :param id: The id of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this UserAlertView.  # noqa: E501

        The alert's item ID.  # noqa: E501

        :return: The item_id of this UserAlertView.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this UserAlertView.

        The alert's item ID.  # noqa: E501

        :param item_id: The item_id of this UserAlertView.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def created(self):
        """Gets the created of this UserAlertView.  # noqa: E501

        The time that this alert was created, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The created of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserAlertView.

        The time that this alert was created, in milliseconds since the UNIX epoch.  # noqa: E501

        :param created: The created of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def last_checked(self):
        """Gets the last_checked of this UserAlertView.  # noqa: E501

        The last time that this alert was checked, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The last_checked of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._last_checked

    @last_checked.setter
    def last_checked(self, last_checked):
        """Sets the last_checked of this UserAlertView.

        The last time that this alert was checked, in milliseconds since the UNIX epoch.  # noqa: E501

        :param last_checked: The last_checked of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._last_checked = last_checked

    @property
    def name(self):
        """Gets the name of this UserAlertView.  # noqa: E501

        The alert's name.  # noqa: E501

        :return: The name of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserAlertView.

        The alert's name.  # noqa: E501

        :param name: The name of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def server(self):
        """Gets the server of this UserAlertView.  # noqa: E501

        The alert's server.  # noqa: E501

        :return: The server of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this UserAlertView.

        The alert's server.  # noqa: E501

        :param server: The server of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def expiry(self):
        """Gets the expiry of this UserAlertView.  # noqa: E501

        The expiry time of this alert, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The expiry of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this UserAlertView.

        The expiry time of this alert, in milliseconds since the UNIX epoch.  # noqa: E501

        :param expiry: The expiry of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def trigger_conditions(self):
        """Gets the trigger_conditions of this UserAlertView.  # noqa: E501

        The trigger conditions for this alert.  # noqa: E501

        :return: The trigger_conditions of this UserAlertView.  # noqa: E501
        :rtype: list[str]
        """
        return self._trigger_conditions

    @trigger_conditions.setter
    def trigger_conditions(self, trigger_conditions):
        """Sets the trigger_conditions of this UserAlertView.

        The trigger conditions for this alert.  # noqa: E501

        :param trigger_conditions: The trigger_conditions of this UserAlertView.  # noqa: E501
        :type: list[str]
        """

        self._trigger_conditions = trigger_conditions

    @property
    def trigger_type(self):
        """Gets the trigger_type of this UserAlertView.  # noqa: E501

        The trigger type of this alert.  # noqa: E501

        :return: The trigger_type of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this UserAlertView.

        The trigger type of this alert.  # noqa: E501

        :param trigger_type: The trigger_type of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._trigger_type = trigger_type

    @property
    def trigger_last_sent(self):
        """Gets the trigger_last_sent of this UserAlertView.  # noqa: E501

        The last time this alert was triggered, in milliseconds since the UNIX epoch.  # noqa: E501

        :return: The trigger_last_sent of this UserAlertView.  # noqa: E501
        :rtype: str
        """
        return self._trigger_last_sent

    @trigger_last_sent.setter
    def trigger_last_sent(self, trigger_last_sent):
        """Sets the trigger_last_sent of this UserAlertView.

        The last time this alert was triggered, in milliseconds since the UNIX epoch.  # noqa: E501

        :param trigger_last_sent: The trigger_last_sent of this UserAlertView.  # noqa: E501
        :type: str
        """

        self._trigger_last_sent = trigger_last_sent

    @property
    def trigger_data_center(self):
        """Gets the trigger_data_center of this UserAlertView.  # noqa: E501

        Whether or not this alert should trigger on the entire data center.  # noqa: E501

        :return: The trigger_data_center of this UserAlertView.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_data_center

    @trigger_data_center.setter
    def trigger_data_center(self, trigger_data_center):
        """Sets the trigger_data_center of this UserAlertView.

        Whether or not this alert should trigger on the entire data center.  # noqa: E501

        :param trigger_data_center: The trigger_data_center of this UserAlertView.  # noqa: E501
        :type: bool
        """

        self._trigger_data_center = trigger_data_center

    @property
    def trigger_hq(self):
        """Gets the trigger_hq of this UserAlertView.  # noqa: E501

        Whether or not this alert should trigger on HQ items.  # noqa: E501

        :return: The trigger_hq of this UserAlertView.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_hq

    @trigger_hq.setter
    def trigger_hq(self, trigger_hq):
        """Sets the trigger_hq of this UserAlertView.

        Whether or not this alert should trigger on HQ items.  # noqa: E501

        :param trigger_hq: The trigger_hq of this UserAlertView.  # noqa: E501
        :type: bool
        """

        self._trigger_hq = trigger_hq

    @property
    def trigger_nq(self):
        """Gets the trigger_nq of this UserAlertView.  # noqa: E501

        Whether or not this alert should trigger on NQ items.  # noqa: E501

        :return: The trigger_nq of this UserAlertView.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_nq

    @trigger_nq.setter
    def trigger_nq(self, trigger_nq):
        """Sets the trigger_nq of this UserAlertView.

        Whether or not this alert should trigger on NQ items.  # noqa: E501

        :param trigger_nq: The trigger_nq of this UserAlertView.  # noqa: E501
        :type: bool
        """

        self._trigger_nq = trigger_nq

    @property
    def trigger_active(self):
        """Gets the trigger_active of this UserAlertView.  # noqa: E501

        Whether or not this alert is active.  # noqa: E501

        :return: The trigger_active of this UserAlertView.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_active

    @trigger_active.setter
    def trigger_active(self, trigger_active):
        """Sets the trigger_active of this UserAlertView.

        Whether or not this alert is active.  # noqa: E501

        :param trigger_active: The trigger_active of this UserAlertView.  # noqa: E501
        :type: bool
        """

        self._trigger_active = trigger_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAlertView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAlertView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAlertView):
            return True

        return self.to_dict() != other.to_dict()
