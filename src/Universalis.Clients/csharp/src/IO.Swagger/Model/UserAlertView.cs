/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserAlertView
    /// </summary>
    [DataContract]
    public partial class UserAlertView :  IEquatable<UserAlertView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAlertView" /> class.
        /// </summary>
        /// <param name="id">The alert&#39;s ID..</param>
        /// <param name="itemID">The alert&#39;s item ID..</param>
        /// <param name="created">The time that this alert was created, in milliseconds since the UNIX epoch..</param>
        /// <param name="lastChecked">The last time that this alert was checked, in milliseconds since the UNIX epoch..</param>
        /// <param name="name">The alert&#39;s name..</param>
        /// <param name="server">The alert&#39;s server..</param>
        /// <param name="expiry">The expiry time of this alert, in milliseconds since the UNIX epoch..</param>
        /// <param name="triggerConditions">The trigger conditions for this alert..</param>
        /// <param name="triggerType">The trigger type of this alert..</param>
        /// <param name="triggerLastSent">The last time this alert was triggered, in milliseconds since the UNIX epoch..</param>
        /// <param name="triggerDataCenter">Whether or not this alert should trigger on the entire data center..</param>
        /// <param name="triggerHQ">Whether or not this alert should trigger on HQ items..</param>
        /// <param name="triggerNQ">Whether or not this alert should trigger on NQ items..</param>
        /// <param name="triggerActive">Whether or not this alert is active..</param>
        public UserAlertView(string id = default(string), int? itemID = default(int?), string created = default(string), string lastChecked = default(string), string name = default(string), string server = default(string), string expiry = default(string), List<string> triggerConditions = default(List<string>), string triggerType = default(string), string triggerLastSent = default(string), bool? triggerDataCenter = default(bool?), bool? triggerHQ = default(bool?), bool? triggerNQ = default(bool?), bool? triggerActive = default(bool?))
        {
            this.Id = id;
            this.ItemID = itemID;
            this.Created = created;
            this.LastChecked = lastChecked;
            this.Name = name;
            this.Server = server;
            this.Expiry = expiry;
            this.TriggerConditions = triggerConditions;
            this.TriggerType = triggerType;
            this.TriggerLastSent = triggerLastSent;
            this.TriggerDataCenter = triggerDataCenter;
            this.TriggerHQ = triggerHQ;
            this.TriggerNQ = triggerNQ;
            this.TriggerActive = triggerActive;
        }
        
        /// <summary>
        /// The alert&#39;s ID.
        /// </summary>
        /// <value>The alert&#39;s ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The alert&#39;s item ID.
        /// </summary>
        /// <value>The alert&#39;s item ID.</value>
        [DataMember(Name="itemID", EmitDefaultValue=false)]
        public int? ItemID { get; set; }

        /// <summary>
        /// The time that this alert was created, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The time that this alert was created, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// The last time that this alert was checked, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The last time that this alert was checked, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="lastChecked", EmitDefaultValue=false)]
        public string LastChecked { get; set; }

        /// <summary>
        /// The alert&#39;s name.
        /// </summary>
        /// <value>The alert&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The alert&#39;s server.
        /// </summary>
        /// <value>The alert&#39;s server.</value>
        [DataMember(Name="server", EmitDefaultValue=false)]
        public string Server { get; set; }

        /// <summary>
        /// The expiry time of this alert, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The expiry time of this alert, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public string Expiry { get; set; }

        /// <summary>
        /// The trigger conditions for this alert.
        /// </summary>
        /// <value>The trigger conditions for this alert.</value>
        [DataMember(Name="triggerConditions", EmitDefaultValue=false)]
        public List<string> TriggerConditions { get; set; }

        /// <summary>
        /// The trigger type of this alert.
        /// </summary>
        /// <value>The trigger type of this alert.</value>
        [DataMember(Name="triggerType", EmitDefaultValue=false)]
        public string TriggerType { get; set; }

        /// <summary>
        /// The last time this alert was triggered, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The last time this alert was triggered, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="triggerLastSent", EmitDefaultValue=false)]
        public string TriggerLastSent { get; set; }

        /// <summary>
        /// Whether or not this alert should trigger on the entire data center.
        /// </summary>
        /// <value>Whether or not this alert should trigger on the entire data center.</value>
        [DataMember(Name="triggerDataCenter", EmitDefaultValue=false)]
        public bool? TriggerDataCenter { get; set; }

        /// <summary>
        /// Whether or not this alert should trigger on HQ items.
        /// </summary>
        /// <value>Whether or not this alert should trigger on HQ items.</value>
        [DataMember(Name="triggerHQ", EmitDefaultValue=false)]
        public bool? TriggerHQ { get; set; }

        /// <summary>
        /// Whether or not this alert should trigger on NQ items.
        /// </summary>
        /// <value>Whether or not this alert should trigger on NQ items.</value>
        [DataMember(Name="triggerNQ", EmitDefaultValue=false)]
        public bool? TriggerNQ { get; set; }

        /// <summary>
        /// Whether or not this alert is active.
        /// </summary>
        /// <value>Whether or not this alert is active.</value>
        [DataMember(Name="triggerActive", EmitDefaultValue=false)]
        public bool? TriggerActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAlertView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastChecked: ").Append(LastChecked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  TriggerConditions: ").Append(TriggerConditions).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  TriggerLastSent: ").Append(TriggerLastSent).Append("\n");
            sb.Append("  TriggerDataCenter: ").Append(TriggerDataCenter).Append("\n");
            sb.Append("  TriggerHQ: ").Append(TriggerHQ).Append("\n");
            sb.Append("  TriggerNQ: ").Append(TriggerNQ).Append("\n");
            sb.Append("  TriggerActive: ").Append(TriggerActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAlertView);
        }

        /// <summary>
        /// Returns true if UserAlertView instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAlertView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAlertView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.LastChecked == input.LastChecked ||
                    (this.LastChecked != null &&
                    this.LastChecked.Equals(input.LastChecked))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.TriggerConditions == input.TriggerConditions ||
                    this.TriggerConditions != null &&
                    this.TriggerConditions.SequenceEqual(input.TriggerConditions)
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                ) && 
                (
                    this.TriggerLastSent == input.TriggerLastSent ||
                    (this.TriggerLastSent != null &&
                    this.TriggerLastSent.Equals(input.TriggerLastSent))
                ) && 
                (
                    this.TriggerDataCenter == input.TriggerDataCenter ||
                    (this.TriggerDataCenter != null &&
                    this.TriggerDataCenter.Equals(input.TriggerDataCenter))
                ) && 
                (
                    this.TriggerHQ == input.TriggerHQ ||
                    (this.TriggerHQ != null &&
                    this.TriggerHQ.Equals(input.TriggerHQ))
                ) && 
                (
                    this.TriggerNQ == input.TriggerNQ ||
                    (this.TriggerNQ != null &&
                    this.TriggerNQ.Equals(input.TriggerNQ))
                ) && 
                (
                    this.TriggerActive == input.TriggerActive ||
                    (this.TriggerActive != null &&
                    this.TriggerActive.Equals(input.TriggerActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.LastChecked != null)
                    hashCode = hashCode * 59 + this.LastChecked.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.TriggerConditions != null)
                    hashCode = hashCode * 59 + this.TriggerConditions.GetHashCode();
                if (this.TriggerType != null)
                    hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                if (this.TriggerLastSent != null)
                    hashCode = hashCode * 59 + this.TriggerLastSent.GetHashCode();
                if (this.TriggerDataCenter != null)
                    hashCode = hashCode * 59 + this.TriggerDataCenter.GetHashCode();
                if (this.TriggerHQ != null)
                    hashCode = hashCode * 59 + this.TriggerHQ.GetHashCode();
                if (this.TriggerNQ != null)
                    hashCode = hashCode * 59 + this.TriggerNQ.GetHashCode();
                if (this.TriggerActive != null)
                    hashCode = hashCode * 59 + this.TriggerActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
