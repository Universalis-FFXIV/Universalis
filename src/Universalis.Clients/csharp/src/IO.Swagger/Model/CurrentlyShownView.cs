/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrentlyShownView
    /// </summary>
    [DataContract]
    public partial class CurrentlyShownView :  IEquatable<CurrentlyShownView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentlyShownView" /> class.
        /// </summary>
        /// <param name="itemID">The item ID..</param>
        /// <param name="worldID">The world ID, if applicable..</param>
        /// <param name="lastUploadTime">The last upload time for this endpoint, in milliseconds since the UNIX epoch..</param>
        /// <param name="listings">The currently-shown listings..</param>
        /// <param name="recentHistory">The currently-shown sales..</param>
        /// <param name="dcName">The DC name, if applicable..</param>
        /// <param name="currentAveragePrice">The average listing price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="currentAveragePriceNQ">The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="currentAveragePriceHQ">The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="regularSaleVelocity">The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries..</param>
        /// <param name="nqSaleVelocity">The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries..</param>
        /// <param name="hqSaleVelocity">The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries..</param>
        /// <param name="averagePrice">The average sale price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="averagePriceNQ">The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="averagePriceHQ">The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean..</param>
        /// <param name="minPrice">The minimum listing price..</param>
        /// <param name="minPriceNQ">The minimum NQ listing price..</param>
        /// <param name="minPriceHQ">The minimum HQ listing price..</param>
        /// <param name="maxPrice">The maximum listing price..</param>
        /// <param name="maxPriceNQ">The maximum NQ listing price..</param>
        /// <param name="maxPriceHQ">The maximum HQ listing price..</param>
        /// <param name="stackSizeHistogram">A map of quantities to listing counts, representing the number of listings of each quantity..</param>
        /// <param name="stackSizeHistogramNQ">A map of quantities to NQ listing counts, representing the number of listings of each quantity..</param>
        /// <param name="stackSizeHistogramHQ">A map of quantities to HQ listing counts, representing the number of listings of each quantity..</param>
        /// <param name="worldName">The world name, if applicable..</param>
        /// <param name="worldUploadTimes">The last upload times in milliseconds since epoch for each world in the response, if this is a DC request..</param>
        public CurrentlyShownView(int? itemID = default(int?), int? worldID = default(int?), long? lastUploadTime = default(long?), List<ListingView> listings = default(List<ListingView>), List<SaleView> recentHistory = default(List<SaleView>), string dcName = default(string), float? currentAveragePrice = default(float?), float? currentAveragePriceNQ = default(float?), float? currentAveragePriceHQ = default(float?), float? regularSaleVelocity = default(float?), float? nqSaleVelocity = default(float?), float? hqSaleVelocity = default(float?), float? averagePrice = default(float?), float? averagePriceNQ = default(float?), float? averagePriceHQ = default(float?), int? minPrice = default(int?), int? minPriceNQ = default(int?), int? minPriceHQ = default(int?), int? maxPrice = default(int?), int? maxPriceNQ = default(int?), int? maxPriceHQ = default(int?), Dictionary<string, int?> stackSizeHistogram = default(Dictionary<string, int?>), Dictionary<string, int?> stackSizeHistogramNQ = default(Dictionary<string, int?>), Dictionary<string, int?> stackSizeHistogramHQ = default(Dictionary<string, int?>), string worldName = default(string), Dictionary<string, long?> worldUploadTimes = default(Dictionary<string, long?>))
        {
            this.ItemID = itemID;
            this.WorldID = worldID;
            this.LastUploadTime = lastUploadTime;
            this.Listings = listings;
            this.RecentHistory = recentHistory;
            this.DcName = dcName;
            this.CurrentAveragePrice = currentAveragePrice;
            this.CurrentAveragePriceNQ = currentAveragePriceNQ;
            this.CurrentAveragePriceHQ = currentAveragePriceHQ;
            this.RegularSaleVelocity = regularSaleVelocity;
            this.NqSaleVelocity = nqSaleVelocity;
            this.HqSaleVelocity = hqSaleVelocity;
            this.AveragePrice = averagePrice;
            this.AveragePriceNQ = averagePriceNQ;
            this.AveragePriceHQ = averagePriceHQ;
            this.MinPrice = minPrice;
            this.MinPriceNQ = minPriceNQ;
            this.MinPriceHQ = minPriceHQ;
            this.MaxPrice = maxPrice;
            this.MaxPriceNQ = maxPriceNQ;
            this.MaxPriceHQ = maxPriceHQ;
            this.StackSizeHistogram = stackSizeHistogram;
            this.StackSizeHistogramNQ = stackSizeHistogramNQ;
            this.StackSizeHistogramHQ = stackSizeHistogramHQ;
            this.WorldName = worldName;
            this.WorldUploadTimes = worldUploadTimes;
        }
        
        /// <summary>
        /// The item ID.
        /// </summary>
        /// <value>The item ID.</value>
        [DataMember(Name="itemID", EmitDefaultValue=false)]
        public int? ItemID { get; set; }

        /// <summary>
        /// The world ID, if applicable.
        /// </summary>
        /// <value>The world ID, if applicable.</value>
        [DataMember(Name="worldID", EmitDefaultValue=false)]
        public int? WorldID { get; set; }

        /// <summary>
        /// The last upload time for this endpoint, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The last upload time for this endpoint, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="lastUploadTime", EmitDefaultValue=false)]
        public long? LastUploadTime { get; set; }

        /// <summary>
        /// The currently-shown listings.
        /// </summary>
        /// <value>The currently-shown listings.</value>
        [DataMember(Name="listings", EmitDefaultValue=false)]
        public List<ListingView> Listings { get; set; }

        /// <summary>
        /// The currently-shown sales.
        /// </summary>
        /// <value>The currently-shown sales.</value>
        [DataMember(Name="recentHistory", EmitDefaultValue=false)]
        public List<SaleView> RecentHistory { get; set; }

        /// <summary>
        /// The DC name, if applicable.
        /// </summary>
        /// <value>The DC name, if applicable.</value>
        [DataMember(Name="dcName", EmitDefaultValue=false)]
        public string DcName { get; set; }

        /// <summary>
        /// The average listing price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average listing price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="currentAveragePrice", EmitDefaultValue=false)]
        public float? CurrentAveragePrice { get; set; }

        /// <summary>
        /// The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="currentAveragePriceNQ", EmitDefaultValue=false)]
        public float? CurrentAveragePriceNQ { get; set; }

        /// <summary>
        /// The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="currentAveragePriceHQ", EmitDefaultValue=false)]
        public float? CurrentAveragePriceHQ { get; set; }

        /// <summary>
        /// The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.
        /// </summary>
        /// <value>The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.</value>
        [DataMember(Name="regularSaleVelocity", EmitDefaultValue=false)]
        public float? RegularSaleVelocity { get; set; }

        /// <summary>
        /// The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.
        /// </summary>
        /// <value>The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.</value>
        [DataMember(Name="nqSaleVelocity", EmitDefaultValue=false)]
        public float? NqSaleVelocity { get; set; }

        /// <summary>
        /// The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.
        /// </summary>
        /// <value>The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).  This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.  This statistic is more useful in historical queries.</value>
        [DataMember(Name="hqSaleVelocity", EmitDefaultValue=false)]
        public float? HqSaleVelocity { get; set; }

        /// <summary>
        /// The average sale price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average sale price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="averagePrice", EmitDefaultValue=false)]
        public float? AveragePrice { get; set; }

        /// <summary>
        /// The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="averagePriceNQ", EmitDefaultValue=false)]
        public float? AveragePriceNQ { get; set; }

        /// <summary>
        /// The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean.
        /// </summary>
        /// <value>The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean.</value>
        [DataMember(Name="averagePriceHQ", EmitDefaultValue=false)]
        public float? AveragePriceHQ { get; set; }

        /// <summary>
        /// The minimum listing price.
        /// </summary>
        /// <value>The minimum listing price.</value>
        [DataMember(Name="minPrice", EmitDefaultValue=false)]
        public int? MinPrice { get; set; }

        /// <summary>
        /// The minimum NQ listing price.
        /// </summary>
        /// <value>The minimum NQ listing price.</value>
        [DataMember(Name="minPriceNQ", EmitDefaultValue=false)]
        public int? MinPriceNQ { get; set; }

        /// <summary>
        /// The minimum HQ listing price.
        /// </summary>
        /// <value>The minimum HQ listing price.</value>
        [DataMember(Name="minPriceHQ", EmitDefaultValue=false)]
        public int? MinPriceHQ { get; set; }

        /// <summary>
        /// The maximum listing price.
        /// </summary>
        /// <value>The maximum listing price.</value>
        [DataMember(Name="maxPrice", EmitDefaultValue=false)]
        public int? MaxPrice { get; set; }

        /// <summary>
        /// The maximum NQ listing price.
        /// </summary>
        /// <value>The maximum NQ listing price.</value>
        [DataMember(Name="maxPriceNQ", EmitDefaultValue=false)]
        public int? MaxPriceNQ { get; set; }

        /// <summary>
        /// The maximum HQ listing price.
        /// </summary>
        /// <value>The maximum HQ listing price.</value>
        [DataMember(Name="maxPriceHQ", EmitDefaultValue=false)]
        public int? MaxPriceHQ { get; set; }

        /// <summary>
        /// A map of quantities to listing counts, representing the number of listings of each quantity.
        /// </summary>
        /// <value>A map of quantities to listing counts, representing the number of listings of each quantity.</value>
        [DataMember(Name="stackSizeHistogram", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogram { get; set; }

        /// <summary>
        /// A map of quantities to NQ listing counts, representing the number of listings of each quantity.
        /// </summary>
        /// <value>A map of quantities to NQ listing counts, representing the number of listings of each quantity.</value>
        [DataMember(Name="stackSizeHistogramNQ", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogramNQ { get; set; }

        /// <summary>
        /// A map of quantities to HQ listing counts, representing the number of listings of each quantity.
        /// </summary>
        /// <value>A map of quantities to HQ listing counts, representing the number of listings of each quantity.</value>
        [DataMember(Name="stackSizeHistogramHQ", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogramHQ { get; set; }

        /// <summary>
        /// The world name, if applicable.
        /// </summary>
        /// <value>The world name, if applicable.</value>
        [DataMember(Name="worldName", EmitDefaultValue=false)]
        public string WorldName { get; set; }

        /// <summary>
        /// The last upload times in milliseconds since epoch for each world in the response, if this is a DC request.
        /// </summary>
        /// <value>The last upload times in milliseconds since epoch for each world in the response, if this is a DC request.</value>
        [DataMember(Name="worldUploadTimes", EmitDefaultValue=false)]
        public Dictionary<string, long?> WorldUploadTimes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrentlyShownView {\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  WorldID: ").Append(WorldID).Append("\n");
            sb.Append("  LastUploadTime: ").Append(LastUploadTime).Append("\n");
            sb.Append("  Listings: ").Append(Listings).Append("\n");
            sb.Append("  RecentHistory: ").Append(RecentHistory).Append("\n");
            sb.Append("  DcName: ").Append(DcName).Append("\n");
            sb.Append("  CurrentAveragePrice: ").Append(CurrentAveragePrice).Append("\n");
            sb.Append("  CurrentAveragePriceNQ: ").Append(CurrentAveragePriceNQ).Append("\n");
            sb.Append("  CurrentAveragePriceHQ: ").Append(CurrentAveragePriceHQ).Append("\n");
            sb.Append("  RegularSaleVelocity: ").Append(RegularSaleVelocity).Append("\n");
            sb.Append("  NqSaleVelocity: ").Append(NqSaleVelocity).Append("\n");
            sb.Append("  HqSaleVelocity: ").Append(HqSaleVelocity).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  AveragePriceNQ: ").Append(AveragePriceNQ).Append("\n");
            sb.Append("  AveragePriceHQ: ").Append(AveragePriceHQ).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MinPriceNQ: ").Append(MinPriceNQ).Append("\n");
            sb.Append("  MinPriceHQ: ").Append(MinPriceHQ).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  MaxPriceNQ: ").Append(MaxPriceNQ).Append("\n");
            sb.Append("  MaxPriceHQ: ").Append(MaxPriceHQ).Append("\n");
            sb.Append("  StackSizeHistogram: ").Append(StackSizeHistogram).Append("\n");
            sb.Append("  StackSizeHistogramNQ: ").Append(StackSizeHistogramNQ).Append("\n");
            sb.Append("  StackSizeHistogramHQ: ").Append(StackSizeHistogramHQ).Append("\n");
            sb.Append("  WorldName: ").Append(WorldName).Append("\n");
            sb.Append("  WorldUploadTimes: ").Append(WorldUploadTimes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentlyShownView);
        }

        /// <summary>
        /// Returns true if CurrentlyShownView instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentlyShownView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentlyShownView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.WorldID == input.WorldID ||
                    (this.WorldID != null &&
                    this.WorldID.Equals(input.WorldID))
                ) && 
                (
                    this.LastUploadTime == input.LastUploadTime ||
                    (this.LastUploadTime != null &&
                    this.LastUploadTime.Equals(input.LastUploadTime))
                ) && 
                (
                    this.Listings == input.Listings ||
                    this.Listings != null &&
                    this.Listings.SequenceEqual(input.Listings)
                ) && 
                (
                    this.RecentHistory == input.RecentHistory ||
                    this.RecentHistory != null &&
                    this.RecentHistory.SequenceEqual(input.RecentHistory)
                ) && 
                (
                    this.DcName == input.DcName ||
                    (this.DcName != null &&
                    this.DcName.Equals(input.DcName))
                ) && 
                (
                    this.CurrentAveragePrice == input.CurrentAveragePrice ||
                    (this.CurrentAveragePrice != null &&
                    this.CurrentAveragePrice.Equals(input.CurrentAveragePrice))
                ) && 
                (
                    this.CurrentAveragePriceNQ == input.CurrentAveragePriceNQ ||
                    (this.CurrentAveragePriceNQ != null &&
                    this.CurrentAveragePriceNQ.Equals(input.CurrentAveragePriceNQ))
                ) && 
                (
                    this.CurrentAveragePriceHQ == input.CurrentAveragePriceHQ ||
                    (this.CurrentAveragePriceHQ != null &&
                    this.CurrentAveragePriceHQ.Equals(input.CurrentAveragePriceHQ))
                ) && 
                (
                    this.RegularSaleVelocity == input.RegularSaleVelocity ||
                    (this.RegularSaleVelocity != null &&
                    this.RegularSaleVelocity.Equals(input.RegularSaleVelocity))
                ) && 
                (
                    this.NqSaleVelocity == input.NqSaleVelocity ||
                    (this.NqSaleVelocity != null &&
                    this.NqSaleVelocity.Equals(input.NqSaleVelocity))
                ) && 
                (
                    this.HqSaleVelocity == input.HqSaleVelocity ||
                    (this.HqSaleVelocity != null &&
                    this.HqSaleVelocity.Equals(input.HqSaleVelocity))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) && 
                (
                    this.AveragePriceNQ == input.AveragePriceNQ ||
                    (this.AveragePriceNQ != null &&
                    this.AveragePriceNQ.Equals(input.AveragePriceNQ))
                ) && 
                (
                    this.AveragePriceHQ == input.AveragePriceHQ ||
                    (this.AveragePriceHQ != null &&
                    this.AveragePriceHQ.Equals(input.AveragePriceHQ))
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    (this.MinPrice != null &&
                    this.MinPrice.Equals(input.MinPrice))
                ) && 
                (
                    this.MinPriceNQ == input.MinPriceNQ ||
                    (this.MinPriceNQ != null &&
                    this.MinPriceNQ.Equals(input.MinPriceNQ))
                ) && 
                (
                    this.MinPriceHQ == input.MinPriceHQ ||
                    (this.MinPriceHQ != null &&
                    this.MinPriceHQ.Equals(input.MinPriceHQ))
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    (this.MaxPrice != null &&
                    this.MaxPrice.Equals(input.MaxPrice))
                ) && 
                (
                    this.MaxPriceNQ == input.MaxPriceNQ ||
                    (this.MaxPriceNQ != null &&
                    this.MaxPriceNQ.Equals(input.MaxPriceNQ))
                ) && 
                (
                    this.MaxPriceHQ == input.MaxPriceHQ ||
                    (this.MaxPriceHQ != null &&
                    this.MaxPriceHQ.Equals(input.MaxPriceHQ))
                ) && 
                (
                    this.StackSizeHistogram == input.StackSizeHistogram ||
                    this.StackSizeHistogram != null &&
                    this.StackSizeHistogram.SequenceEqual(input.StackSizeHistogram)
                ) && 
                (
                    this.StackSizeHistogramNQ == input.StackSizeHistogramNQ ||
                    this.StackSizeHistogramNQ != null &&
                    this.StackSizeHistogramNQ.SequenceEqual(input.StackSizeHistogramNQ)
                ) && 
                (
                    this.StackSizeHistogramHQ == input.StackSizeHistogramHQ ||
                    this.StackSizeHistogramHQ != null &&
                    this.StackSizeHistogramHQ.SequenceEqual(input.StackSizeHistogramHQ)
                ) && 
                (
                    this.WorldName == input.WorldName ||
                    (this.WorldName != null &&
                    this.WorldName.Equals(input.WorldName))
                ) && 
                (
                    this.WorldUploadTimes == input.WorldUploadTimes ||
                    this.WorldUploadTimes != null &&
                    this.WorldUploadTimes.SequenceEqual(input.WorldUploadTimes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.WorldID != null)
                    hashCode = hashCode * 59 + this.WorldID.GetHashCode();
                if (this.LastUploadTime != null)
                    hashCode = hashCode * 59 + this.LastUploadTime.GetHashCode();
                if (this.Listings != null)
                    hashCode = hashCode * 59 + this.Listings.GetHashCode();
                if (this.RecentHistory != null)
                    hashCode = hashCode * 59 + this.RecentHistory.GetHashCode();
                if (this.DcName != null)
                    hashCode = hashCode * 59 + this.DcName.GetHashCode();
                if (this.CurrentAveragePrice != null)
                    hashCode = hashCode * 59 + this.CurrentAveragePrice.GetHashCode();
                if (this.CurrentAveragePriceNQ != null)
                    hashCode = hashCode * 59 + this.CurrentAveragePriceNQ.GetHashCode();
                if (this.CurrentAveragePriceHQ != null)
                    hashCode = hashCode * 59 + this.CurrentAveragePriceHQ.GetHashCode();
                if (this.RegularSaleVelocity != null)
                    hashCode = hashCode * 59 + this.RegularSaleVelocity.GetHashCode();
                if (this.NqSaleVelocity != null)
                    hashCode = hashCode * 59 + this.NqSaleVelocity.GetHashCode();
                if (this.HqSaleVelocity != null)
                    hashCode = hashCode * 59 + this.HqSaleVelocity.GetHashCode();
                if (this.AveragePrice != null)
                    hashCode = hashCode * 59 + this.AveragePrice.GetHashCode();
                if (this.AveragePriceNQ != null)
                    hashCode = hashCode * 59 + this.AveragePriceNQ.GetHashCode();
                if (this.AveragePriceHQ != null)
                    hashCode = hashCode * 59 + this.AveragePriceHQ.GetHashCode();
                if (this.MinPrice != null)
                    hashCode = hashCode * 59 + this.MinPrice.GetHashCode();
                if (this.MinPriceNQ != null)
                    hashCode = hashCode * 59 + this.MinPriceNQ.GetHashCode();
                if (this.MinPriceHQ != null)
                    hashCode = hashCode * 59 + this.MinPriceHQ.GetHashCode();
                if (this.MaxPrice != null)
                    hashCode = hashCode * 59 + this.MaxPrice.GetHashCode();
                if (this.MaxPriceNQ != null)
                    hashCode = hashCode * 59 + this.MaxPriceNQ.GetHashCode();
                if (this.MaxPriceHQ != null)
                    hashCode = hashCode * 59 + this.MaxPriceHQ.GetHashCode();
                if (this.StackSizeHistogram != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogram.GetHashCode();
                if (this.StackSizeHistogramNQ != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogramNQ.GetHashCode();
                if (this.StackSizeHistogramHQ != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogramHQ.GetHashCode();
                if (this.WorldName != null)
                    hashCode = hashCode * 59 + this.WorldName.GetHashCode();
                if (this.WorldUploadTimes != null)
                    hashCode = hashCode * 59 + this.WorldUploadTimes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
