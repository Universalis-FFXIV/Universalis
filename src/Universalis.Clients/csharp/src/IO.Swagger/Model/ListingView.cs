/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ListingView
    /// </summary>
    [DataContract]
    public partial class ListingView :  IEquatable<ListingView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingView" /> class.
        /// </summary>
        /// <param name="lastReviewTime">The time that this listing was posted, in seconds since the UNIX epoch..</param>
        /// <param name="pricePerUnit">The price per unit sold..</param>
        /// <param name="quantity">The stack size sold..</param>
        /// <param name="stainID">The ID of the dye on this item..</param>
        /// <param name="worldName">The world name, if applicable..</param>
        /// <param name="worldID">The world ID, if applicable..</param>
        /// <param name="creatorName">The creator&#39;s character name..</param>
        /// <param name="creatorID">A SHA256 hash of the creator&#39;s ID..</param>
        /// <param name="hq">Whether or not the item is high-quality..</param>
        /// <param name="isCrafted">Whether or not the item is crafted..</param>
        /// <param name="listingID">A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null..</param>
        /// <param name="materia">The materia on this item..</param>
        /// <param name="onMannequin">Whether or not the item is being sold on a mannequin..</param>
        /// <param name="retainerCity">The city ID of the retainer.  Limsa Lominsa &#x3D; 1  Gridania &#x3D; 2  Ul&#39;dah &#x3D; 3  Ishgard &#x3D; 4  Kugane &#x3D; 7  Crystarium &#x3D; 10.</param>
        /// <param name="retainerID">A SHA256 hash of the retainer&#39;s ID..</param>
        /// <param name="retainerName">The retainer&#39;s name..</param>
        /// <param name="sellerID">A SHA256 hash of the seller&#39;s ID..</param>
        /// <param name="total">The total price..</param>
        public ListingView(long? lastReviewTime = default(long?), int? pricePerUnit = default(int?), int? quantity = default(int?), int? stainID = default(int?), string worldName = default(string), int? worldID = default(int?), string creatorName = default(string), string creatorID = default(string), bool? hq = default(bool?), bool? isCrafted = default(bool?), string listingID = default(string), List<MateriaView> materia = default(List<MateriaView>), bool? onMannequin = default(bool?), int? retainerCity = default(int?), string retainerID = default(string), string retainerName = default(string), string sellerID = default(string), int? total = default(int?))
        {
            this.LastReviewTime = lastReviewTime;
            this.PricePerUnit = pricePerUnit;
            this.Quantity = quantity;
            this.StainID = stainID;
            this.WorldName = worldName;
            this.WorldID = worldID;
            this.CreatorName = creatorName;
            this.CreatorID = creatorID;
            this.Hq = hq;
            this.IsCrafted = isCrafted;
            this.ListingID = listingID;
            this.Materia = materia;
            this.OnMannequin = onMannequin;
            this.RetainerCity = retainerCity;
            this.RetainerID = retainerID;
            this.RetainerName = retainerName;
            this.SellerID = sellerID;
            this.Total = total;
        }
        
        /// <summary>
        /// The time that this listing was posted, in seconds since the UNIX epoch.
        /// </summary>
        /// <value>The time that this listing was posted, in seconds since the UNIX epoch.</value>
        [DataMember(Name="lastReviewTime", EmitDefaultValue=false)]
        public long? LastReviewTime { get; set; }

        /// <summary>
        /// The price per unit sold.
        /// </summary>
        /// <value>The price per unit sold.</value>
        [DataMember(Name="pricePerUnit", EmitDefaultValue=false)]
        public int? PricePerUnit { get; set; }

        /// <summary>
        /// The stack size sold.
        /// </summary>
        /// <value>The stack size sold.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The ID of the dye on this item.
        /// </summary>
        /// <value>The ID of the dye on this item.</value>
        [DataMember(Name="stainID", EmitDefaultValue=false)]
        public int? StainID { get; set; }

        /// <summary>
        /// The world name, if applicable.
        /// </summary>
        /// <value>The world name, if applicable.</value>
        [DataMember(Name="worldName", EmitDefaultValue=false)]
        public string WorldName { get; set; }

        /// <summary>
        /// The world ID, if applicable.
        /// </summary>
        /// <value>The world ID, if applicable.</value>
        [DataMember(Name="worldID", EmitDefaultValue=false)]
        public int? WorldID { get; set; }

        /// <summary>
        /// The creator&#39;s character name.
        /// </summary>
        /// <value>The creator&#39;s character name.</value>
        [DataMember(Name="creatorName", EmitDefaultValue=false)]
        public string CreatorName { get; set; }

        /// <summary>
        /// A SHA256 hash of the creator&#39;s ID.
        /// </summary>
        /// <value>A SHA256 hash of the creator&#39;s ID.</value>
        [DataMember(Name="creatorID", EmitDefaultValue=false)]
        public string CreatorID { get; set; }

        /// <summary>
        /// Whether or not the item is high-quality.
        /// </summary>
        /// <value>Whether or not the item is high-quality.</value>
        [DataMember(Name="hq", EmitDefaultValue=false)]
        public bool? Hq { get; set; }

        /// <summary>
        /// Whether or not the item is crafted.
        /// </summary>
        /// <value>Whether or not the item is crafted.</value>
        [DataMember(Name="isCrafted", EmitDefaultValue=false)]
        public bool? IsCrafted { get; set; }

        /// <summary>
        /// A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null.
        /// </summary>
        /// <value>A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null.</value>
        [DataMember(Name="listingID", EmitDefaultValue=false)]
        public string ListingID { get; set; }

        /// <summary>
        /// The materia on this item.
        /// </summary>
        /// <value>The materia on this item.</value>
        [DataMember(Name="materia", EmitDefaultValue=false)]
        public List<MateriaView> Materia { get; set; }

        /// <summary>
        /// Whether or not the item is being sold on a mannequin.
        /// </summary>
        /// <value>Whether or not the item is being sold on a mannequin.</value>
        [DataMember(Name="onMannequin", EmitDefaultValue=false)]
        public bool? OnMannequin { get; set; }

        /// <summary>
        /// The city ID of the retainer.  Limsa Lominsa &#x3D; 1  Gridania &#x3D; 2  Ul&#39;dah &#x3D; 3  Ishgard &#x3D; 4  Kugane &#x3D; 7  Crystarium &#x3D; 10
        /// </summary>
        /// <value>The city ID of the retainer.  Limsa Lominsa &#x3D; 1  Gridania &#x3D; 2  Ul&#39;dah &#x3D; 3  Ishgard &#x3D; 4  Kugane &#x3D; 7  Crystarium &#x3D; 10</value>
        [DataMember(Name="retainerCity", EmitDefaultValue=false)]
        public int? RetainerCity { get; set; }

        /// <summary>
        /// A SHA256 hash of the retainer&#39;s ID.
        /// </summary>
        /// <value>A SHA256 hash of the retainer&#39;s ID.</value>
        [DataMember(Name="retainerID", EmitDefaultValue=false)]
        public string RetainerID { get; set; }

        /// <summary>
        /// The retainer&#39;s name.
        /// </summary>
        /// <value>The retainer&#39;s name.</value>
        [DataMember(Name="retainerName", EmitDefaultValue=false)]
        public string RetainerName { get; set; }

        /// <summary>
        /// A SHA256 hash of the seller&#39;s ID.
        /// </summary>
        /// <value>A SHA256 hash of the seller&#39;s ID.</value>
        [DataMember(Name="sellerID", EmitDefaultValue=false)]
        public string SellerID { get; set; }

        /// <summary>
        /// The total price.
        /// </summary>
        /// <value>The total price.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingView {\n");
            sb.Append("  LastReviewTime: ").Append(LastReviewTime).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  StainID: ").Append(StainID).Append("\n");
            sb.Append("  WorldName: ").Append(WorldName).Append("\n");
            sb.Append("  WorldID: ").Append(WorldID).Append("\n");
            sb.Append("  CreatorName: ").Append(CreatorName).Append("\n");
            sb.Append("  CreatorID: ").Append(CreatorID).Append("\n");
            sb.Append("  Hq: ").Append(Hq).Append("\n");
            sb.Append("  IsCrafted: ").Append(IsCrafted).Append("\n");
            sb.Append("  ListingID: ").Append(ListingID).Append("\n");
            sb.Append("  Materia: ").Append(Materia).Append("\n");
            sb.Append("  OnMannequin: ").Append(OnMannequin).Append("\n");
            sb.Append("  RetainerCity: ").Append(RetainerCity).Append("\n");
            sb.Append("  RetainerID: ").Append(RetainerID).Append("\n");
            sb.Append("  RetainerName: ").Append(RetainerName).Append("\n");
            sb.Append("  SellerID: ").Append(SellerID).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingView);
        }

        /// <summary>
        /// Returns true if ListingView instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastReviewTime == input.LastReviewTime ||
                    (this.LastReviewTime != null &&
                    this.LastReviewTime.Equals(input.LastReviewTime))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.StainID == input.StainID ||
                    (this.StainID != null &&
                    this.StainID.Equals(input.StainID))
                ) && 
                (
                    this.WorldName == input.WorldName ||
                    (this.WorldName != null &&
                    this.WorldName.Equals(input.WorldName))
                ) && 
                (
                    this.WorldID == input.WorldID ||
                    (this.WorldID != null &&
                    this.WorldID.Equals(input.WorldID))
                ) && 
                (
                    this.CreatorName == input.CreatorName ||
                    (this.CreatorName != null &&
                    this.CreatorName.Equals(input.CreatorName))
                ) && 
                (
                    this.CreatorID == input.CreatorID ||
                    (this.CreatorID != null &&
                    this.CreatorID.Equals(input.CreatorID))
                ) && 
                (
                    this.Hq == input.Hq ||
                    (this.Hq != null &&
                    this.Hq.Equals(input.Hq))
                ) && 
                (
                    this.IsCrafted == input.IsCrafted ||
                    (this.IsCrafted != null &&
                    this.IsCrafted.Equals(input.IsCrafted))
                ) && 
                (
                    this.ListingID == input.ListingID ||
                    (this.ListingID != null &&
                    this.ListingID.Equals(input.ListingID))
                ) && 
                (
                    this.Materia == input.Materia ||
                    this.Materia != null &&
                    this.Materia.SequenceEqual(input.Materia)
                ) && 
                (
                    this.OnMannequin == input.OnMannequin ||
                    (this.OnMannequin != null &&
                    this.OnMannequin.Equals(input.OnMannequin))
                ) && 
                (
                    this.RetainerCity == input.RetainerCity ||
                    (this.RetainerCity != null &&
                    this.RetainerCity.Equals(input.RetainerCity))
                ) && 
                (
                    this.RetainerID == input.RetainerID ||
                    (this.RetainerID != null &&
                    this.RetainerID.Equals(input.RetainerID))
                ) && 
                (
                    this.RetainerName == input.RetainerName ||
                    (this.RetainerName != null &&
                    this.RetainerName.Equals(input.RetainerName))
                ) && 
                (
                    this.SellerID == input.SellerID ||
                    (this.SellerID != null &&
                    this.SellerID.Equals(input.SellerID))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastReviewTime != null)
                    hashCode = hashCode * 59 + this.LastReviewTime.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.StainID != null)
                    hashCode = hashCode * 59 + this.StainID.GetHashCode();
                if (this.WorldName != null)
                    hashCode = hashCode * 59 + this.WorldName.GetHashCode();
                if (this.WorldID != null)
                    hashCode = hashCode * 59 + this.WorldID.GetHashCode();
                if (this.CreatorName != null)
                    hashCode = hashCode * 59 + this.CreatorName.GetHashCode();
                if (this.CreatorID != null)
                    hashCode = hashCode * 59 + this.CreatorID.GetHashCode();
                if (this.Hq != null)
                    hashCode = hashCode * 59 + this.Hq.GetHashCode();
                if (this.IsCrafted != null)
                    hashCode = hashCode * 59 + this.IsCrafted.GetHashCode();
                if (this.ListingID != null)
                    hashCode = hashCode * 59 + this.ListingID.GetHashCode();
                if (this.Materia != null)
                    hashCode = hashCode * 59 + this.Materia.GetHashCode();
                if (this.OnMannequin != null)
                    hashCode = hashCode * 59 + this.OnMannequin.GetHashCode();
                if (this.RetainerCity != null)
                    hashCode = hashCode * 59 + this.RetainerCity.GetHashCode();
                if (this.RetainerID != null)
                    hashCode = hashCode * 59 + this.RetainerID.GetHashCode();
                if (this.RetainerName != null)
                    hashCode = hashCode * 59 + this.RetainerName.GetHashCode();
                if (this.SellerID != null)
                    hashCode = hashCode * 59 + this.SellerID.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
