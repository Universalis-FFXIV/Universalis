/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrentlyShownMultiViewV2
    /// </summary>
    [DataContract]
    public partial class CurrentlyShownMultiViewV2 :  IEquatable<CurrentlyShownMultiViewV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentlyShownMultiViewV2" /> class.
        /// </summary>
        /// <param name="itemIDs">The item IDs that were requested..</param>
        /// <param name="items">The item data that was requested, keyed on the item ID..</param>
        /// <param name="worldID">The ID of the world requested, if applicable..</param>
        /// <param name="dcName">The name of the DC requested, if applicable..</param>
        /// <param name="unresolvedItems">A list of IDs that could not be resolved to any item data..</param>
        /// <param name="worldName">The name of the world requested, if applicable..</param>
        public CurrentlyShownMultiViewV2(List<int?> itemIDs = default(List<int?>), Dictionary<string, CurrentlyShownView> items = default(Dictionary<string, CurrentlyShownView>), int? worldID = default(int?), string dcName = default(string), List<int?> unresolvedItems = default(List<int?>), string worldName = default(string))
        {
            this.ItemIDs = itemIDs;
            this.Items = items;
            this.WorldID = worldID;
            this.DcName = dcName;
            this.UnresolvedItems = unresolvedItems;
            this.WorldName = worldName;
        }
        
        /// <summary>
        /// The item IDs that were requested.
        /// </summary>
        /// <value>The item IDs that were requested.</value>
        [DataMember(Name="itemIDs", EmitDefaultValue=false)]
        public List<int?> ItemIDs { get; set; }

        /// <summary>
        /// The item data that was requested, keyed on the item ID.
        /// </summary>
        /// <value>The item data that was requested, keyed on the item ID.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public Dictionary<string, CurrentlyShownView> Items { get; set; }

        /// <summary>
        /// The ID of the world requested, if applicable.
        /// </summary>
        /// <value>The ID of the world requested, if applicable.</value>
        [DataMember(Name="worldID", EmitDefaultValue=false)]
        public int? WorldID { get; set; }

        /// <summary>
        /// The name of the DC requested, if applicable.
        /// </summary>
        /// <value>The name of the DC requested, if applicable.</value>
        [DataMember(Name="dcName", EmitDefaultValue=false)]
        public string DcName { get; set; }

        /// <summary>
        /// A list of IDs that could not be resolved to any item data.
        /// </summary>
        /// <value>A list of IDs that could not be resolved to any item data.</value>
        [DataMember(Name="unresolvedItems", EmitDefaultValue=false)]
        public List<int?> UnresolvedItems { get; set; }

        /// <summary>
        /// The name of the world requested, if applicable.
        /// </summary>
        /// <value>The name of the world requested, if applicable.</value>
        [DataMember(Name="worldName", EmitDefaultValue=false)]
        public string WorldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrentlyShownMultiViewV2 {\n");
            sb.Append("  ItemIDs: ").Append(ItemIDs).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  WorldID: ").Append(WorldID).Append("\n");
            sb.Append("  DcName: ").Append(DcName).Append("\n");
            sb.Append("  UnresolvedItems: ").Append(UnresolvedItems).Append("\n");
            sb.Append("  WorldName: ").Append(WorldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentlyShownMultiViewV2);
        }

        /// <summary>
        /// Returns true if CurrentlyShownMultiViewV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentlyShownMultiViewV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentlyShownMultiViewV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemIDs == input.ItemIDs ||
                    this.ItemIDs != null &&
                    this.ItemIDs.SequenceEqual(input.ItemIDs)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.WorldID == input.WorldID ||
                    (this.WorldID != null &&
                    this.WorldID.Equals(input.WorldID))
                ) && 
                (
                    this.DcName == input.DcName ||
                    (this.DcName != null &&
                    this.DcName.Equals(input.DcName))
                ) && 
                (
                    this.UnresolvedItems == input.UnresolvedItems ||
                    this.UnresolvedItems != null &&
                    this.UnresolvedItems.SequenceEqual(input.UnresolvedItems)
                ) && 
                (
                    this.WorldName == input.WorldName ||
                    (this.WorldName != null &&
                    this.WorldName.Equals(input.WorldName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemIDs != null)
                    hashCode = hashCode * 59 + this.ItemIDs.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.WorldID != null)
                    hashCode = hashCode * 59 + this.WorldID.GetHashCode();
                if (this.DcName != null)
                    hashCode = hashCode * 59 + this.DcName.GetHashCode();
                if (this.UnresolvedItems != null)
                    hashCode = hashCode * 59 + this.UnresolvedItems.GetHashCode();
                if (this.WorldName != null)
                    hashCode = hashCode * 59 + this.WorldName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
