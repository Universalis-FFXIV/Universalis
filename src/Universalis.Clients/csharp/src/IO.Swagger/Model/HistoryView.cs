/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HistoryView
    /// </summary>
    [DataContract]
    public partial class HistoryView :  IEquatable<HistoryView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryView" /> class.
        /// </summary>
        /// <param name="itemID">The item ID..</param>
        /// <param name="worldID">The world ID, if applicable..</param>
        /// <param name="lastUploadTime">The last upload time for this endpoint, in milliseconds since the UNIX epoch..</param>
        /// <param name="entries">The historical sales..</param>
        /// <param name="dcName">The DC name, if applicable..</param>
        /// <param name="stackSizeHistogram">A map of quantities to sale counts, representing the number of sales of each quantity..</param>
        /// <param name="stackSizeHistogramNQ">A map of quantities to NQ sale counts, representing the number of sales of each quantity..</param>
        /// <param name="stackSizeHistogramHQ">A map of quantities to HQ sale counts, representing the number of sales of each quantity..</param>
        /// <param name="regularSaleVelocity">The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first)..</param>
        /// <param name="nqSaleVelocity">The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first)..</param>
        /// <param name="hqSaleVelocity">The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first)..</param>
        /// <param name="worldName">The world name, if applicable..</param>
        public HistoryView(int? itemID = default(int?), int? worldID = default(int?), long? lastUploadTime = default(long?), List<MinimizedSaleView> entries = default(List<MinimizedSaleView>), string dcName = default(string), Dictionary<string, int?> stackSizeHistogram = default(Dictionary<string, int?>), Dictionary<string, int?> stackSizeHistogramNQ = default(Dictionary<string, int?>), Dictionary<string, int?> stackSizeHistogramHQ = default(Dictionary<string, int?>), float? regularSaleVelocity = default(float?), float? nqSaleVelocity = default(float?), float? hqSaleVelocity = default(float?), string worldName = default(string))
        {
            this.ItemID = itemID;
            this.WorldID = worldID;
            this.LastUploadTime = lastUploadTime;
            this.Entries = entries;
            this.DcName = dcName;
            this.StackSizeHistogram = stackSizeHistogram;
            this.StackSizeHistogramNQ = stackSizeHistogramNQ;
            this.StackSizeHistogramHQ = stackSizeHistogramHQ;
            this.RegularSaleVelocity = regularSaleVelocity;
            this.NqSaleVelocity = nqSaleVelocity;
            this.HqSaleVelocity = hqSaleVelocity;
            this.WorldName = worldName;
        }
        
        /// <summary>
        /// The item ID.
        /// </summary>
        /// <value>The item ID.</value>
        [DataMember(Name="itemID", EmitDefaultValue=false)]
        public int? ItemID { get; set; }

        /// <summary>
        /// The world ID, if applicable.
        /// </summary>
        /// <value>The world ID, if applicable.</value>
        [DataMember(Name="worldID", EmitDefaultValue=false)]
        public int? WorldID { get; set; }

        /// <summary>
        /// The last upload time for this endpoint, in milliseconds since the UNIX epoch.
        /// </summary>
        /// <value>The last upload time for this endpoint, in milliseconds since the UNIX epoch.</value>
        [DataMember(Name="lastUploadTime", EmitDefaultValue=false)]
        public long? LastUploadTime { get; set; }

        /// <summary>
        /// The historical sales.
        /// </summary>
        /// <value>The historical sales.</value>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public List<MinimizedSaleView> Entries { get; set; }

        /// <summary>
        /// The DC name, if applicable.
        /// </summary>
        /// <value>The DC name, if applicable.</value>
        [DataMember(Name="dcName", EmitDefaultValue=false)]
        public string DcName { get; set; }

        /// <summary>
        /// A map of quantities to sale counts, representing the number of sales of each quantity.
        /// </summary>
        /// <value>A map of quantities to sale counts, representing the number of sales of each quantity.</value>
        [DataMember(Name="stackSizeHistogram", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogram { get; set; }

        /// <summary>
        /// A map of quantities to NQ sale counts, representing the number of sales of each quantity.
        /// </summary>
        /// <value>A map of quantities to NQ sale counts, representing the number of sales of each quantity.</value>
        [DataMember(Name="stackSizeHistogramNQ", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogramNQ { get; set; }

        /// <summary>
        /// A map of quantities to HQ sale counts, representing the number of sales of each quantity.
        /// </summary>
        /// <value>A map of quantities to HQ sale counts, representing the number of sales of each quantity.</value>
        [DataMember(Name="stackSizeHistogramHQ", EmitDefaultValue=false)]
        public Dictionary<string, int?> StackSizeHistogramHQ { get; set; }

        /// <summary>
        /// The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
        /// </summary>
        /// <value>The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).</value>
        [DataMember(Name="regularSaleVelocity", EmitDefaultValue=false)]
        public float? RegularSaleVelocity { get; set; }

        /// <summary>
        /// The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
        /// </summary>
        /// <value>The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).</value>
        [DataMember(Name="nqSaleVelocity", EmitDefaultValue=false)]
        public float? NqSaleVelocity { get; set; }

        /// <summary>
        /// The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
        /// </summary>
        /// <value>The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).</value>
        [DataMember(Name="hqSaleVelocity", EmitDefaultValue=false)]
        public float? HqSaleVelocity { get; set; }

        /// <summary>
        /// The world name, if applicable.
        /// </summary>
        /// <value>The world name, if applicable.</value>
        [DataMember(Name="worldName", EmitDefaultValue=false)]
        public string WorldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryView {\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  WorldID: ").Append(WorldID).Append("\n");
            sb.Append("  LastUploadTime: ").Append(LastUploadTime).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  DcName: ").Append(DcName).Append("\n");
            sb.Append("  StackSizeHistogram: ").Append(StackSizeHistogram).Append("\n");
            sb.Append("  StackSizeHistogramNQ: ").Append(StackSizeHistogramNQ).Append("\n");
            sb.Append("  StackSizeHistogramHQ: ").Append(StackSizeHistogramHQ).Append("\n");
            sb.Append("  RegularSaleVelocity: ").Append(RegularSaleVelocity).Append("\n");
            sb.Append("  NqSaleVelocity: ").Append(NqSaleVelocity).Append("\n");
            sb.Append("  HqSaleVelocity: ").Append(HqSaleVelocity).Append("\n");
            sb.Append("  WorldName: ").Append(WorldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryView);
        }

        /// <summary>
        /// Returns true if HistoryView instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.WorldID == input.WorldID ||
                    (this.WorldID != null &&
                    this.WorldID.Equals(input.WorldID))
                ) && 
                (
                    this.LastUploadTime == input.LastUploadTime ||
                    (this.LastUploadTime != null &&
                    this.LastUploadTime.Equals(input.LastUploadTime))
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.DcName == input.DcName ||
                    (this.DcName != null &&
                    this.DcName.Equals(input.DcName))
                ) && 
                (
                    this.StackSizeHistogram == input.StackSizeHistogram ||
                    this.StackSizeHistogram != null &&
                    this.StackSizeHistogram.SequenceEqual(input.StackSizeHistogram)
                ) && 
                (
                    this.StackSizeHistogramNQ == input.StackSizeHistogramNQ ||
                    this.StackSizeHistogramNQ != null &&
                    this.StackSizeHistogramNQ.SequenceEqual(input.StackSizeHistogramNQ)
                ) && 
                (
                    this.StackSizeHistogramHQ == input.StackSizeHistogramHQ ||
                    this.StackSizeHistogramHQ != null &&
                    this.StackSizeHistogramHQ.SequenceEqual(input.StackSizeHistogramHQ)
                ) && 
                (
                    this.RegularSaleVelocity == input.RegularSaleVelocity ||
                    (this.RegularSaleVelocity != null &&
                    this.RegularSaleVelocity.Equals(input.RegularSaleVelocity))
                ) && 
                (
                    this.NqSaleVelocity == input.NqSaleVelocity ||
                    (this.NqSaleVelocity != null &&
                    this.NqSaleVelocity.Equals(input.NqSaleVelocity))
                ) && 
                (
                    this.HqSaleVelocity == input.HqSaleVelocity ||
                    (this.HqSaleVelocity != null &&
                    this.HqSaleVelocity.Equals(input.HqSaleVelocity))
                ) && 
                (
                    this.WorldName == input.WorldName ||
                    (this.WorldName != null &&
                    this.WorldName.Equals(input.WorldName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.WorldID != null)
                    hashCode = hashCode * 59 + this.WorldID.GetHashCode();
                if (this.LastUploadTime != null)
                    hashCode = hashCode * 59 + this.LastUploadTime.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                if (this.DcName != null)
                    hashCode = hashCode * 59 + this.DcName.GetHashCode();
                if (this.StackSizeHistogram != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogram.GetHashCode();
                if (this.StackSizeHistogramNQ != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogramNQ.GetHashCode();
                if (this.StackSizeHistogramHQ != null)
                    hashCode = hashCode * 59 + this.StackSizeHistogramHQ.GetHashCode();
                if (this.RegularSaleVelocity != null)
                    hashCode = hashCode * 59 + this.RegularSaleVelocity.GetHashCode();
                if (this.NqSaleVelocity != null)
                    hashCode = hashCode * 59 + this.NqSaleVelocity.GetHashCode();
                if (this.HqSaleVelocity != null)
                    hashCode = hashCode * 59 + this.HqSaleVelocity.GetHashCode();
                if (this.WorldName != null)
                    hashCode = hashCode * 59 + this.WorldName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
