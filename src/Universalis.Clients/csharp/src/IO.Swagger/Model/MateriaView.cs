/* 
 * Universalis
 *
 * Welcome to the Universalis documentation page.  <br />  <br />  There is a rate limit of 20 req/s (40 req/s burst) on the API, and 10 req/s (20 req/s burst) on the website itself, if you're scraping instead.  The number of simultaneous connections per IP is capped to 8.    To map item IDs to item names or vice versa, use <a href=\"https://xivapi.com/docs/Search#search\">XIVAPI</a>.  In addition to XIVAPI, you can also get item ID mappings from <a href=\"https://lumina.xiv.dev/docs/intro.html\">Lumina</a>,  <a href=\"https://raw.githubusercontent.com/xivapi/ffxiv-datamining/master/csv/Item.csv\">this sheet</a>, or  <a href=\"https://raw.githubusercontent.com/ffxiv-teamcraft/ffxiv-teamcraft/master/apps/client/src/assets/data/items.json\">this</a> pre-made dump.    To get a mapping of world IDs to world names, use <a href=\"https://xivapi.com/World\">XIVAPI</a> or  <a href=\"https://github.com/xivapi/ffxiv-datamining/blob/master/csv/World.csv\">this sheet</a>.  The <code>key</code> column represents the world ID, and the <code>Name</code> column represents the world name.  Note that not all listed worlds are available to be used &#8212; many of the worlds in this sheet are test worlds,  or Korean worlds (Korea is unsupported at this time).    <br />  <br />  If you use this API heavily for your projects, please consider supporting the website on  <a href=\"https://liberapay.com/karashiiro\">Liberapay</a>, <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>, or  <a href=\"https://patreon.com/universalis\">Patreon</a>, or making a one-time donation on  <a href=\"https://ko-fi.com/karashiiro\">Ko-fi</a>. Any support is appreciated!  
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MateriaView
    /// </summary>
    [DataContract]
    public partial class MateriaView :  IEquatable<MateriaView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MateriaView" /> class.
        /// </summary>
        /// <param name="slotID">The materia slot..</param>
        /// <param name="materiaID">The materia item ID..</param>
        public MateriaView(int? slotID = default(int?), int? materiaID = default(int?))
        {
            this.SlotID = slotID;
            this.MateriaID = materiaID;
        }
        
        /// <summary>
        /// The materia slot.
        /// </summary>
        /// <value>The materia slot.</value>
        [DataMember(Name="slotID", EmitDefaultValue=false)]
        public int? SlotID { get; set; }

        /// <summary>
        /// The materia item ID.
        /// </summary>
        /// <value>The materia item ID.</value>
        [DataMember(Name="materiaID", EmitDefaultValue=false)]
        public int? MateriaID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MateriaView {\n");
            sb.Append("  SlotID: ").Append(SlotID).Append("\n");
            sb.Append("  MateriaID: ").Append(MateriaID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MateriaView);
        }

        /// <summary>
        /// Returns true if MateriaView instances are equal
        /// </summary>
        /// <param name="input">Instance of MateriaView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MateriaView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlotID == input.SlotID ||
                    (this.SlotID != null &&
                    this.SlotID.Equals(input.SlotID))
                ) && 
                (
                    this.MateriaID == input.MateriaID ||
                    (this.MateriaID != null &&
                    this.MateriaID.Equals(input.MateriaID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlotID != null)
                    hashCode = hashCode * 59 + this.SlotID.GetHashCode();
                if (this.MateriaID != null)
                    hashCode = hashCode * 59 + this.MateriaID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
